{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2GRQnxMzISE_"
   },
   "source": [
    "# Proyecto 03 - Procesamiento del Lenguaje Natural\n",
    "\n",
    "## Dataset: The Multilingual Amazon Reviews Corpus\n",
    "\n",
    "**Recuerda descargar el dataset de [aquí](https://github.com/kang205/SASRec). Es un archivo .zip que contiene tres documentos. Más información sobre el dataset [aquí](https://registry.opendata.aws/amazon-reviews-ml/). Es importante que tengas en cuenta la [licencia](https://docs.opendata.aws/amazon-reviews-ml/license.txt) de este dataset.**\n",
    "\n",
    "### Exploración de datos y Procesamiento del Lenguaje Natural\n",
    "\n",
    "El siguiente notebook tiene como fin utilizar el procesamiento de lenguaje natural para calificar correctamente los comentarios del dataset de Amazon. Con este procesamiento vamos a poder responder qué palabras están asociadas a calificaiciones positivas y qué palabras a calificaciones negativas. \n",
    "Comenzamos con un Análisis Exploratorio de Datos. Lo primero que vemos es que nos encontramos con una base de datos no relacional (No SQL) ya que es un archivo Json. \n",
    "\n",
    "### Machine Learning\n",
    "\n",
    "Implementaremos un modelo que, dada la crítica de un producto, asigne la cantidad de estrellas correspondiente. Un disparador es definir si es un problema de clasificación o regresión. \n",
    "\n",
    "Los pasos a seguir en el notebook son los siguientes: \n",
    "1. Implementación de transformaciones de datos y su justificacion.\n",
    "1. Evaluación de resultados. Justificacion de la métrica elegida.\n",
    "1. Eleccion de un modelo benchmark y comparacion de resultados con este modelo.\n",
    "1. Optimizacion de hiperparámetros del modelo.\n",
    "1. Responderemos la pregunta: ¿Qué información está usando el modelo para predecir?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Parte A - Exploración de Datos\n",
    "\n",
    "Comenzamos con el Análisis Exploratorio de Datos para comprender el dataset y todo el flujo de trabajo que le siga.\n",
    "Para eso importamos las librerías necesarias y configuramos NLTK (Natural Languaje Tokenizer) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "x1GFwraSISFB"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\Admin\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\Admin\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import itertools\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set()\n",
    "\n",
    "import nltk\n",
    "\n",
    "# Esto sirve para configurar NLTK. \n",
    "nltk.download('punkt')\n",
    "nltk.download('stopwords')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Carga de datos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Procedemos a cargar los tres datasets. Por un lado tenemos el dataset de train que nos sirve para entrenar el modelo y por otro lado tenemos a los dos datasets de test (dev y test). Vamos a explorarlos para ver cómo se componen y si están balanceados."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>reviewer_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>language</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>es_0491108</td>\n",
       "      <td>product_es_0296024</td>\n",
       "      <td>reviewer_es_0999081</td>\n",
       "      <td>1</td>\n",
       "      <td>Nada bueno se me fue ka pantalla en menos de 8...</td>\n",
       "      <td>television Nevir</td>\n",
       "      <td>es</td>\n",
       "      <td>electronics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>es_0869872</td>\n",
       "      <td>product_es_0922286</td>\n",
       "      <td>reviewer_es_0216771</td>\n",
       "      <td>1</td>\n",
       "      <td>Horrible, nos tuvimos que comprar otro porque ...</td>\n",
       "      <td>Dinero tirado a la basura con esta compra</td>\n",
       "      <td>es</td>\n",
       "      <td>electronics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>es_0811721</td>\n",
       "      <td>product_es_0474543</td>\n",
       "      <td>reviewer_es_0929213</td>\n",
       "      <td>1</td>\n",
       "      <td>Te obligan a comprar dos unidades y te llega s...</td>\n",
       "      <td>solo llega una unidad cuando te obligan a comp...</td>\n",
       "      <td>es</td>\n",
       "      <td>drugstore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>es_0359921</td>\n",
       "      <td>product_es_0656090</td>\n",
       "      <td>reviewer_es_0224702</td>\n",
       "      <td>1</td>\n",
       "      <td>No entro en descalificar al vendedor, solo pue...</td>\n",
       "      <td>PRODUCTO NO RECIBIDO.</td>\n",
       "      <td>es</td>\n",
       "      <td>wireless</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>es_0068940</td>\n",
       "      <td>product_es_0662544</td>\n",
       "      <td>reviewer_es_0224827</td>\n",
       "      <td>1</td>\n",
       "      <td>Llega tarde y co la talla equivocada</td>\n",
       "      <td>Devuelto</td>\n",
       "      <td>es</td>\n",
       "      <td>shoes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    review_id          product_id          reviewer_id  stars  \\\n",
       "0  es_0491108  product_es_0296024  reviewer_es_0999081      1   \n",
       "1  es_0869872  product_es_0922286  reviewer_es_0216771      1   \n",
       "2  es_0811721  product_es_0474543  reviewer_es_0929213      1   \n",
       "3  es_0359921  product_es_0656090  reviewer_es_0224702      1   \n",
       "4  es_0068940  product_es_0662544  reviewer_es_0224827      1   \n",
       "\n",
       "                                         review_body  \\\n",
       "0  Nada bueno se me fue ka pantalla en menos de 8...   \n",
       "1  Horrible, nos tuvimos que comprar otro porque ...   \n",
       "2  Te obligan a comprar dos unidades y te llega s...   \n",
       "3  No entro en descalificar al vendedor, solo pue...   \n",
       "4               Llega tarde y co la talla equivocada   \n",
       "\n",
       "                                        review_title language product_category  \n",
       "0                                   television Nevir       es      electronics  \n",
       "1          Dinero tirado a la basura con esta compra       es      electronics  \n",
       "2  solo llega una unidad cuando te obligan a comp...       es        drugstore  \n",
       "3                              PRODUCTO NO RECIBIDO.       es         wireless  \n",
       "4                                           Devuelto       es            shoes  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset = pd.read_json('dataset_es_train.json', lines= True)\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(200000, 8)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admin\\miniconda3\\envs\\datascience\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(dataset.stars)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>reviewer_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>language</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>es_0491108</td>\n",
       "      <td>product_es_0296024</td>\n",
       "      <td>reviewer_es_0999081</td>\n",
       "      <td>1</td>\n",
       "      <td>Nada bueno se me fue ka pantalla en menos de 8...</td>\n",
       "      <td>television Nevir</td>\n",
       "      <td>es</td>\n",
       "      <td>electronics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>es_0869872</td>\n",
       "      <td>product_es_0922286</td>\n",
       "      <td>reviewer_es_0216771</td>\n",
       "      <td>1</td>\n",
       "      <td>Horrible, nos tuvimos que comprar otro porque ...</td>\n",
       "      <td>Dinero tirado a la basura con esta compra</td>\n",
       "      <td>es</td>\n",
       "      <td>electronics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>es_0811721</td>\n",
       "      <td>product_es_0474543</td>\n",
       "      <td>reviewer_es_0929213</td>\n",
       "      <td>1</td>\n",
       "      <td>Te obligan a comprar dos unidades y te llega s...</td>\n",
       "      <td>solo llega una unidad cuando te obligan a comp...</td>\n",
       "      <td>es</td>\n",
       "      <td>drugstore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>es_0359921</td>\n",
       "      <td>product_es_0656090</td>\n",
       "      <td>reviewer_es_0224702</td>\n",
       "      <td>1</td>\n",
       "      <td>No entro en descalificar al vendedor, solo pue...</td>\n",
       "      <td>PRODUCTO NO RECIBIDO.</td>\n",
       "      <td>es</td>\n",
       "      <td>wireless</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>es_0068940</td>\n",
       "      <td>product_es_0662544</td>\n",
       "      <td>reviewer_es_0224827</td>\n",
       "      <td>1</td>\n",
       "      <td>Llega tarde y co la talla equivocada</td>\n",
       "      <td>Devuelto</td>\n",
       "      <td>es</td>\n",
       "      <td>shoes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    review_id          product_id          reviewer_id  stars  \\\n",
       "0  es_0491108  product_es_0296024  reviewer_es_0999081      1   \n",
       "1  es_0869872  product_es_0922286  reviewer_es_0216771      1   \n",
       "2  es_0811721  product_es_0474543  reviewer_es_0929213      1   \n",
       "3  es_0359921  product_es_0656090  reviewer_es_0224702      1   \n",
       "4  es_0068940  product_es_0662544  reviewer_es_0224827      1   \n",
       "\n",
       "                                         review_body  \\\n",
       "0  Nada bueno se me fue ka pantalla en menos de 8...   \n",
       "1  Horrible, nos tuvimos que comprar otro porque ...   \n",
       "2  Te obligan a comprar dos unidades y te llega s...   \n",
       "3  No entro en descalificar al vendedor, solo pue...   \n",
       "4               Llega tarde y co la talla equivocada   \n",
       "\n",
       "                                        review_title language product_category  \n",
       "0                                   television Nevir       es      electronics  \n",
       "1          Dinero tirado a la basura con esta compra       es      electronics  \n",
       "2  solo llega una unidad cuando te obligan a comp...       es        drugstore  \n",
       "3                              PRODUCTO NO RECIBIDO.       es         wireless  \n",
       "4                                           Devuelto       es            shoes  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_dev = pd.read_json('dataset_es_dev.json', lines= True)\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5000, 8)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_dev.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admin\\miniconda3\\envs\\datascience\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(dataset_dev.stars)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>reviewer_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>language</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>es_0491108</td>\n",
       "      <td>product_es_0296024</td>\n",
       "      <td>reviewer_es_0999081</td>\n",
       "      <td>1</td>\n",
       "      <td>Nada bueno se me fue ka pantalla en menos de 8...</td>\n",
       "      <td>television Nevir</td>\n",
       "      <td>es</td>\n",
       "      <td>electronics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>es_0869872</td>\n",
       "      <td>product_es_0922286</td>\n",
       "      <td>reviewer_es_0216771</td>\n",
       "      <td>1</td>\n",
       "      <td>Horrible, nos tuvimos que comprar otro porque ...</td>\n",
       "      <td>Dinero tirado a la basura con esta compra</td>\n",
       "      <td>es</td>\n",
       "      <td>electronics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>es_0811721</td>\n",
       "      <td>product_es_0474543</td>\n",
       "      <td>reviewer_es_0929213</td>\n",
       "      <td>1</td>\n",
       "      <td>Te obligan a comprar dos unidades y te llega s...</td>\n",
       "      <td>solo llega una unidad cuando te obligan a comp...</td>\n",
       "      <td>es</td>\n",
       "      <td>drugstore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>es_0359921</td>\n",
       "      <td>product_es_0656090</td>\n",
       "      <td>reviewer_es_0224702</td>\n",
       "      <td>1</td>\n",
       "      <td>No entro en descalificar al vendedor, solo pue...</td>\n",
       "      <td>PRODUCTO NO RECIBIDO.</td>\n",
       "      <td>es</td>\n",
       "      <td>wireless</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>es_0068940</td>\n",
       "      <td>product_es_0662544</td>\n",
       "      <td>reviewer_es_0224827</td>\n",
       "      <td>1</td>\n",
       "      <td>Llega tarde y co la talla equivocada</td>\n",
       "      <td>Devuelto</td>\n",
       "      <td>es</td>\n",
       "      <td>shoes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    review_id          product_id          reviewer_id  stars  \\\n",
       "0  es_0491108  product_es_0296024  reviewer_es_0999081      1   \n",
       "1  es_0869872  product_es_0922286  reviewer_es_0216771      1   \n",
       "2  es_0811721  product_es_0474543  reviewer_es_0929213      1   \n",
       "3  es_0359921  product_es_0656090  reviewer_es_0224702      1   \n",
       "4  es_0068940  product_es_0662544  reviewer_es_0224827      1   \n",
       "\n",
       "                                         review_body  \\\n",
       "0  Nada bueno se me fue ka pantalla en menos de 8...   \n",
       "1  Horrible, nos tuvimos que comprar otro porque ...   \n",
       "2  Te obligan a comprar dos unidades y te llega s...   \n",
       "3  No entro en descalificar al vendedor, solo pue...   \n",
       "4               Llega tarde y co la talla equivocada   \n",
       "\n",
       "                                        review_title language product_category  \n",
       "0                                   television Nevir       es      electronics  \n",
       "1          Dinero tirado a la basura con esta compra       es      electronics  \n",
       "2  solo llega una unidad cuando te obligan a comp...       es        drugstore  \n",
       "3                              PRODUCTO NO RECIBIDO.       es         wireless  \n",
       "4                                           Devuelto       es            shoes  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_test = pd.read_json('dataset_es_test.json', lines= True)\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5000, 8)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admin\\miniconda3\\envs\\datascience\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(dataset_test.stars)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En esta primera exploración pudimos ver las variables que componen a los 3 datasets y vemos que los datos están balanceados.\n",
    "Podemos observar los atributos y nuestra variable objetivo que sería la columna \"Stars\" ya que es la que contiene el puntaje que fue asignado a cada reseña. Entendemos que 1 es el puntaje más negativo y 5 el más positivo. Esto lo vamos a seguir desarrollando en el notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.0\n",
      "3.0\n",
      "3.0\n"
     ]
    }
   ],
   "source": [
    "print(dataset.stars.mean())\n",
    "print(dataset_dev.stars.mean())\n",
    "print(dataset_test.stars.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vemos que la media de puntaje de los 3 datasets es 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "review_id           0\n",
      "product_id          0\n",
      "reviewer_id         0\n",
      "stars               0\n",
      "review_body         0\n",
      "review_title        0\n",
      "language            0\n",
      "product_category    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(dataset.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "review_id           0\n",
      "product_id          0\n",
      "reviewer_id         0\n",
      "stars               0\n",
      "review_body         0\n",
      "review_title        0\n",
      "language            0\n",
      "product_category    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(dataset_dev.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "review_id           0\n",
      "product_id          0\n",
      "reviewer_id         0\n",
      "stars               0\n",
      "review_body         0\n",
      "review_title        0\n",
      "language            0\n",
      "product_category    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(dataset_test.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "No tenemos valores nulos en ninguna columna"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['es'], dtype=object)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset[\"language\"].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Validamos que el idioma en el que se escribieron los comentarios sean todos en español por lo tanto no nos sirve la columna \"Language\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1440x576 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (20,8))\n",
    "\n",
    "fig = plt.figure(figsize=(8,5))\n",
    "sns.countplot(data=dataset, y=\"product_category\", order=dataset['product_category'].value_counts().index)\n",
    "plt.title('product_category train')\n",
    "plt.show()\n",
    "\n",
    "fig = plt.figure(figsize=(8,5))\n",
    "sns.countplot(data=dataset_dev, y=\"product_category\", order=dataset_dev['product_category'].value_counts().index)\n",
    "plt.title('product_category train')\n",
    "plt.show()\n",
    "\n",
    "fig = plt.figure(figsize=(8,5))\n",
    "sns.countplot(data=dataset_test, y=\"product_category\", order=dataset_test['product_category'].value_counts().index)\n",
    "plt.title('product_category train')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En esta instancia podemos visualizar la presencia de datos por categoria de producto. Observamos que home, wireless y toy son los atributos más frecuentes y en cambio industiral supplies, musical instruments, grocery y watch son los menos. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Continuamos eliminando los atributos que no aportan a nuestro analisis (review_id, product_id, reviewer_id y language)\n",
    "Nos quedamos solo con los atributos review_body, review_title, product_category y la variable objetivo stars. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['review_id', 'product_id', 'reviewer_id', 'stars', 'review_body',\n",
      "       'review_title', 'language', 'product_category'],\n",
      "      dtype='object')\n",
      "Index(['review_id', 'product_id', 'reviewer_id', 'stars', 'review_body',\n",
      "       'review_title', 'language', 'product_category'],\n",
      "      dtype='object')\n",
      "Index(['review_id', 'product_id', 'reviewer_id', 'stars', 'review_body',\n",
      "       'review_title', 'language', 'product_category'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(dataset.columns)\n",
    "print(dataset_dev.columns)\n",
    "print(dataset_test.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_train = dataset[[\"stars\", \"review_body\", \"review_title\", \"product_category\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_dev = dataset_dev[[\"stars\", \"review_body\", \"review_title\", \"product_category\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_test = dataset_test[[\"stars\", \"review_body\", \"review_title\", \"product_category\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['stars', 'review_body', 'review_title', 'product_category'], dtype='object')\n",
      "Index(['stars', 'review_body', 'review_title', 'product_category'], dtype='object')\n",
      "Index(['stars', 'review_body', 'review_title', 'product_category'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(df_train.columns)\n",
    "print(df_dev.columns)\n",
    "print(df_test.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Breve exploración del dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Avanzamos con una breve exploración del dataset viendo títulos y comentarios aleatoriamente"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137130 Un poco grande\n"
     ]
    }
   ],
   "source": [
    "index_random = np.random.randint(0,high = df_train.shape[0])\n",
    "titular = df_train.iloc[index_random].review_title\n",
    "print(index_random, titular)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62433 El primer dia de carga y no dura ni un dia entero y sin usar mucho el telefono. No la recomiendo.\n"
     ]
    }
   ],
   "source": [
    "index_random = np.random.randint(0,high = df_train.shape[0])\n",
    "cuerpo = df_train.iloc[index_random].review_body\n",
    "print(index_random, cuerpo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62433 2\n"
     ]
    }
   ],
   "source": [
    "print(index_random, df_train.iloc[index_random].stars)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A simple vista se ve que el comentario es negativo y cuando vemos el puntaje vemos que es 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tokenización"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora ya nos metemos en el procesamiento de lenguaje natural. Para eso comenzamos con la tokenización que nos va a permitir separar las oraciones en palabras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Un poco grande']"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titular_st = nltk.tokenize.sent_tokenize(titular)\n",
    "titular_st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Un', 'poco', 'grande']"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titular_wt = nltk.tokenize.word_tokenize(titular)\n",
    "titular_wt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['El primer dia de carga y no dura ni un dia entero y sin usar mucho el telefono.',\n",
       " 'No la recomiendo.']"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cuerpo_st = nltk.tokenize.sent_tokenize(cuerpo)\n",
    "cuerpo_st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['El',\n",
       " 'primer',\n",
       " 'dia',\n",
       " 'de',\n",
       " 'carga',\n",
       " 'y',\n",
       " 'no',\n",
       " 'dura',\n",
       " 'ni',\n",
       " 'un',\n",
       " 'dia',\n",
       " 'entero',\n",
       " 'y',\n",
       " 'sin',\n",
       " 'usar',\n",
       " 'mucho',\n",
       " 'el',\n",
       " 'telefono',\n",
       " '.',\n",
       " 'No',\n",
       " 'la',\n",
       " 'recomiendo',\n",
       " '.']"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cuerpo_wt = nltk.tokenize.word_tokenize(cuerpo)\n",
    "cuerpo_wt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Un paso importante es la normalización y esto es llevar los datos a una estructura común donde las palabras escritas de manera distinta pero con mismo significado se representen de la misma manera. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#aca me faltaria pasar a minuscula, tokenizr ya hice arriba explicar entonces arribs, limpiar caracteres y llevar a raiz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Normalización\n",
    "\n",
    "\n",
    "1. Stopwords\n",
    "\n",
    "Importarmos los `stopwords` del español e imprimimos. Las stopwrods son las palabras que no suman significado a la oración, pueden ser ignoradas sin sacrificar el sentido de la oración."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['de', 'la', 'que', 'el', 'en', 'y', 'a', 'los', 'del', 'se', 'las', 'por', 'un', 'para', 'con', 'no', 'una', 'su', 'al', 'lo', 'como', 'más', 'pero', 'sus', 'le', 'ya', 'o', 'este', 'sí', 'porque', 'esta', 'entre', 'cuando', 'muy', 'sin', 'sobre', 'también', 'me', 'hasta', 'hay', 'donde', 'quien', 'desde', 'todo', 'nos', 'durante', 'todos', 'uno', 'les', 'ni', 'contra', 'otros', 'ese', 'eso', 'ante', 'ellos', 'e', 'esto', 'mí', 'antes', 'algunos', 'qué', 'unos', 'yo', 'otro', 'otras', 'otra', 'él', 'tanto', 'esa', 'estos', 'mucho', 'quienes', 'nada', 'muchos', 'cual', 'poco', 'ella', 'estar', 'estas', 'algunas', 'algo', 'nosotros', 'mi', 'mis', 'tú', 'te', 'ti', 'tu', 'tus', 'ellas', 'nosotras', 'vosotros', 'vosotras', 'os', 'mío', 'mía', 'míos', 'mías', 'tuyo', 'tuya', 'tuyos', 'tuyas', 'suyo', 'suya', 'suyos', 'suyas', 'nuestro', 'nuestra', 'nuestros', 'nuestras', 'vuestro', 'vuestra', 'vuestros', 'vuestras', 'esos', 'esas', 'estoy', 'estás', 'está', 'estamos', 'estáis', 'están', 'esté', 'estés', 'estemos', 'estéis', 'estén', 'estaré', 'estarás', 'estará', 'estaremos', 'estaréis', 'estarán', 'estaría', 'estarías', 'estaríamos', 'estaríais', 'estarían', 'estaba', 'estabas', 'estábamos', 'estabais', 'estaban', 'estuve', 'estuviste', 'estuvo', 'estuvimos', 'estuvisteis', 'estuvieron', 'estuviera', 'estuvieras', 'estuviéramos', 'estuvierais', 'estuvieran', 'estuviese', 'estuvieses', 'estuviésemos', 'estuvieseis', 'estuviesen', 'estando', 'estado', 'estada', 'estados', 'estadas', 'estad', 'he', 'has', 'ha', 'hemos', 'habéis', 'han', 'haya', 'hayas', 'hayamos', 'hayáis', 'hayan', 'habré', 'habrás', 'habrá', 'habremos', 'habréis', 'habrán', 'habría', 'habrías', 'habríamos', 'habríais', 'habrían', 'había', 'habías', 'habíamos', 'habíais', 'habían', 'hube', 'hubiste', 'hubo', 'hubimos', 'hubisteis', 'hubieron', 'hubiera', 'hubieras', 'hubiéramos', 'hubierais', 'hubieran', 'hubiese', 'hubieses', 'hubiésemos', 'hubieseis', 'hubiesen', 'habiendo', 'habido', 'habida', 'habidos', 'habidas', 'soy', 'eres', 'es', 'somos', 'sois', 'son', 'sea', 'seas', 'seamos', 'seáis', 'sean', 'seré', 'serás', 'será', 'seremos', 'seréis', 'serán', 'sería', 'serías', 'seríamos', 'seríais', 'serían', 'era', 'eras', 'éramos', 'erais', 'eran', 'fui', 'fuiste', 'fue', 'fuimos', 'fuisteis', 'fueron', 'fuera', 'fueras', 'fuéramos', 'fuerais', 'fueran', 'fuese', 'fueses', 'fuésemos', 'fueseis', 'fuesen', 'sintiendo', 'sentido', 'sentida', 'sentidos', 'sentidas', 'siente', 'sentid', 'tengo', 'tienes', 'tiene', 'tenemos', 'tenéis', 'tienen', 'tenga', 'tengas', 'tengamos', 'tengáis', 'tengan', 'tendré', 'tendrás', 'tendrá', 'tendremos', 'tendréis', 'tendrán', 'tendría', 'tendrías', 'tendríamos', 'tendríais', 'tendrían', 'tenía', 'tenías', 'teníamos', 'teníais', 'tenían', 'tuve', 'tuviste', 'tuvo', 'tuvimos', 'tuvisteis', 'tuvieron', 'tuviera', 'tuvieras', 'tuviéramos', 'tuvierais', 'tuvieran', 'tuviese', 'tuvieses', 'tuviésemos', 'tuvieseis', 'tuviesen', 'teniendo', 'tenido', 'tenida', 'tenidos', 'tenidas', 'tened']\n"
     ]
    }
   ],
   "source": [
    "stopwords = nltk.corpus.stopwords.words('spanish')\n",
    "stopwords = [palabra for palabra in stopwords if 'not' not in palabra]\n",
    "print(stopwords)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Al ver las stopwords, entendemos que son palabras que no suman al sentido de las oraciones y las podemos eliminar. \n",
    "Avanzamos en eliminar del titular y el cuerpo elegido los stopwords."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Un', 'grande']"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titular_wt_sin_sw = [word for word in titular_wt if word not in stopwords]\n",
    "titular_wt_sin_sw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['El',\n",
       " 'primer',\n",
       " 'dia',\n",
       " 'carga',\n",
       " 'dura',\n",
       " 'dia',\n",
       " 'entero',\n",
       " 'usar',\n",
       " 'telefono',\n",
       " '.',\n",
       " 'No',\n",
       " 'recomiendo',\n",
       " '.']"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cuerpo_wt_sin_sw = [word for word in cuerpo_wt if word not in stopwords]\n",
    "cuerpo_wt_sin_sw"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vemos que igualmente hay palabras que podemos eliminar como a, q, las comas y los puntos. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Frecuencia de palabras\n",
    "\n",
    "Dado el titular y el cuerpo ya tokenizado por palabras y sin stopwords, usamos `nltk` para extrar la frecuencia con que aparece cada palabras. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FreqDist({'Un': 1, 'grande': 1})"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq = nltk.FreqDist(titular_wt_sin_sw)\n",
    "freq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FreqDist({'dia': 2, '.': 2, 'El': 1, 'primer': 1, 'carga': 1, 'dura': 1, 'entero': 1, 'usar': 1, 'telefono': 1, 'No': 1, ...})"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq = nltk.FreqDist(cuerpo_wt_sin_sw)\n",
    "freq"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dataset Completo\n",
    "\n",
    "Antes de pasar a extraer features de cada instancia del Dataset, podemos hacer un pequeño análisis del dataset en su conjunto. Podemos agrupar todos los titulares por tipo y extraer de cada clase las palabras más frecuentes. Para ello:\n",
    "\n",
    "1. Agrupar los titulares por tipo. Crear un dataframe para cada uno.\n",
    "2. Crear una lista vacia y agregar en esa lista todos los titulares (por tipo/dataframe creado) ya tokenizados (usar el `RegexpTokenizer`) y filtrado por `stopwords`.\n",
    "3. Usar el `FreqDist` en esa lista que acaban de llenar. Llevar lo que devuelve `FreqDist` a un Dataframe. Ordenar por frecuencia en que aparece cada palabra.\n",
    "4. Hacer un `barplot` o similar para visualizar.\n",
    "5. ¿Qué palabras filtrarían, aparte de las que aparecen en `stopwords`? Crear una lista vacía y agregarlas a mano. Agregar en el código que realizaron una línea (similar a la que usan con `stopwords`) para que también filtre por esas palabras.\n",
    "6. Volver a visualizar."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "filtrar = []\n",
    "if True:\n",
    "    filtrar.append(\"u\")\n",
    "    filtrar.append(\"new\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Nada bueno se me fue ka pantalla en menos de 8...</td>\n",
       "      <td>television Nevir</td>\n",
       "      <td>electronics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Horrible, nos tuvimos que comprar otro porque ...</td>\n",
       "      <td>Dinero tirado a la basura con esta compra</td>\n",
       "      <td>electronics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Te obligan a comprar dos unidades y te llega s...</td>\n",
       "      <td>solo llega una unidad cuando te obligan a comp...</td>\n",
       "      <td>drugstore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>No entro en descalificar al vendedor, solo pue...</td>\n",
       "      <td>PRODUCTO NO RECIBIDO.</td>\n",
       "      <td>wireless</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>Llega tarde y co la talla equivocada</td>\n",
       "      <td>Devuelto</td>\n",
       "      <td>shoes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   stars                                        review_body  \\\n",
       "0      1  Nada bueno se me fue ka pantalla en menos de 8...   \n",
       "1      1  Horrible, nos tuvimos que comprar otro porque ...   \n",
       "2      1  Te obligan a comprar dos unidades y te llega s...   \n",
       "3      1  No entro en descalificar al vendedor, solo pue...   \n",
       "4      1               Llega tarde y co la talla equivocada   \n",
       "\n",
       "                                        review_title product_category  \n",
       "0                                   television Nevir      electronics  \n",
       "1          Dinero tirado a la basura con esta compra      electronics  \n",
       "2  solo llega una unidad cuando te obligan a comp...        drugstore  \n",
       "3                              PRODUCTO NO RECIBIDO.         wireless  \n",
       "4                                           Devuelto            shoes  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_punataje_1 = df_train[df_train.stars==1]\n",
    "dataset_punataje_1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Agrupamos por el puntaje más bajo y vemos que los comentarios y los titulares son muy negativos. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>40000</th>\n",
       "      <td>2</td>\n",
       "      <td>Los tornillos no ajustan bien, se caen. No lo ...</td>\n",
       "      <td>Regular</td>\n",
       "      <td>toy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40001</th>\n",
       "      <td>2</td>\n",
       "      <td>Si haces varias impresiones seguidas aparecen ...</td>\n",
       "      <td>LAS IMPRESIONES NO SON DE MUY BUENA CALIDAD</td>\n",
       "      <td>office_product</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40002</th>\n",
       "      <td>2</td>\n",
       "      <td>es pequeño no coincide con la pantalla del a1</td>\n",
       "      <td>pequeño</td>\n",
       "      <td>wireless</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40003</th>\n",
       "      <td>2</td>\n",
       "      <td>No lleva nada para trasportarla y es un poco r...</td>\n",
       "      <td>No lo mandan completo</td>\n",
       "      <td>sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40004</th>\n",
       "      <td>2</td>\n",
       "      <td>a ver si me explico , su software reconoce las...</td>\n",
       "      <td>USB 3.0 Adaptador de red de doble banda????</td>\n",
       "      <td>wireless</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       stars                                        review_body  \\\n",
       "40000      2  Los tornillos no ajustan bien, se caen. No lo ...   \n",
       "40001      2  Si haces varias impresiones seguidas aparecen ...   \n",
       "40002      2      es pequeño no coincide con la pantalla del a1   \n",
       "40003      2  No lleva nada para trasportarla y es un poco r...   \n",
       "40004      2  a ver si me explico , su software reconoce las...   \n",
       "\n",
       "                                      review_title product_category  \n",
       "40000                                      Regular              toy  \n",
       "40001  LAS IMPRESIONES NO SON DE MUY BUENA CALIDAD   office_product  \n",
       "40002                                      pequeño         wireless  \n",
       "40003                        No lo mandan completo           sports  \n",
       "40004  USB 3.0 Adaptador de red de doble banda????         wireless  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_punataje_2 = df_train[df_train.stars==2]\n",
    "dataset_punataje_2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Con el puntaje 2 (el segundo peor) vemos que los comentarios también son negativos. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>80000</th>\n",
       "      <td>3</td>\n",
       "      <td>cabe bien un móvil de 5,5 y cumple su función ...</td>\n",
       "      <td>buena funda para movil 5,5</td>\n",
       "      <td>wireless</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80001</th>\n",
       "      <td>3</td>\n",
       "      <td>El aparato tiene un tamaño perfecto. Y la embo...</td>\n",
       "      <td>Aparato perfecto para verduras (no cebollas, n...</td>\n",
       "      <td>kitchen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80002</th>\n",
       "      <td>3</td>\n",
       "      <td>La luces llegaron en tiempo y bien, las ocho f...</td>\n",
       "      <td>Poco duraderas</td>\n",
       "      <td>home</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80003</th>\n",
       "      <td>3</td>\n",
       "      <td>No sé puede apagar, está todo el rato consumie...</td>\n",
       "      <td>Lo peor es el apagado</td>\n",
       "      <td>home</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80004</th>\n",
       "      <td>3</td>\n",
       "      <td>Vino sin la goma ajustable en la tapa y si pon...</td>\n",
       "      <td>Le faltó la goma a la tapa para que ajuste bien.</td>\n",
       "      <td>home</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       stars                                        review_body  \\\n",
       "80000      3  cabe bien un móvil de 5,5 y cumple su función ...   \n",
       "80001      3  El aparato tiene un tamaño perfecto. Y la embo...   \n",
       "80002      3  La luces llegaron en tiempo y bien, las ocho f...   \n",
       "80003      3  No sé puede apagar, está todo el rato consumie...   \n",
       "80004      3  Vino sin la goma ajustable en la tapa y si pon...   \n",
       "\n",
       "                                            review_title product_category  \n",
       "80000                         buena funda para movil 5,5         wireless  \n",
       "80001  Aparato perfecto para verduras (no cebollas, n...          kitchen  \n",
       "80002                                     Poco duraderas             home  \n",
       "80003                              Lo peor es el apagado             home  \n",
       "80004   Le faltó la goma a la tapa para que ajuste bien.             home  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_punataje_3 = df_train[df_train.stars==3]\n",
    "dataset_punataje_3.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Con respecto al puntaje 3 se complica un poco definirlo en negativo o positivo porque vemos comentarios que son positivos y comentarios que son negativos. Igualmente teniendo en cuerpa cuerpo y título vemos que el sentimiento es más negativo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>120000</th>\n",
       "      <td>4</td>\n",
       "      <td>Tiene buena pinta, veremos el resultado</td>\n",
       "      <td>Calidad</td>\n",
       "      <td>sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120001</th>\n",
       "      <td>4</td>\n",
       "      <td>Entrega rápida como siempre pero falta factura</td>\n",
       "      <td>Falta factura</td>\n",
       "      <td>wireless</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120002</th>\n",
       "      <td>4</td>\n",
       "      <td>Está bien y envío rápido</td>\n",
       "      <td>Bueno</td>\n",
       "      <td>pc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120003</th>\n",
       "      <td>4</td>\n",
       "      <td>Queda muy bien, material duradero y tamaño per...</td>\n",
       "      <td>Material duradero</td>\n",
       "      <td>home</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120004</th>\n",
       "      <td>4</td>\n",
       "      <td>Genial aunque huele mucho a pegamento</td>\n",
       "      <td>Buena</td>\n",
       "      <td>personal_care_appliances</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        stars                                        review_body  \\\n",
       "120000      4            Tiene buena pinta, veremos el resultado   \n",
       "120001      4     Entrega rápida como siempre pero falta factura   \n",
       "120002      4                           Está bien y envío rápido   \n",
       "120003      4  Queda muy bien, material duradero y tamaño per...   \n",
       "120004      4              Genial aunque huele mucho a pegamento   \n",
       "\n",
       "             review_title          product_category  \n",
       "120000            Calidad                    sports  \n",
       "120001      Falta factura                  wireless  \n",
       "120002              Bueno                        pc  \n",
       "120003  Material duradero                      home  \n",
       "120004              Buena  personal_care_appliances  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_punataje_4 = df_train[df_train.stars==4]\n",
    "dataset_punataje_4.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Con el puntaje 4 vemos que los comentarios son positivos aunque tiene algunas críticas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>160000</th>\n",
       "      <td>5</td>\n",
       "      <td>Es muy práctico para cuando me voy de vacacion...</td>\n",
       "      <td>Muy útil</td>\n",
       "      <td>lawn_and_garden</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160001</th>\n",
       "      <td>5</td>\n",
       "      <td>Cumple su función calidad precio bien. Buen ma...</td>\n",
       "      <td>Luz Ultravioleta en led bien diseñada</td>\n",
       "      <td>home</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160002</th>\n",
       "      <td>5</td>\n",
       "      <td>Perfecto.. Es lo que buscaba</td>\n",
       "      <td>Perfecto</td>\n",
       "      <td>wireless</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160003</th>\n",
       "      <td>5</td>\n",
       "      <td>MUY BUENA RELACIÓN CALIDAD-PRECIO, ES SILENCIO...</td>\n",
       "      <td>MUY BUENA DESTRUCTORA</td>\n",
       "      <td>office_product</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160004</th>\n",
       "      <td>5</td>\n",
       "      <td>a mi hija le encanta, aunque hubiera preferido...</td>\n",
       "      <td>muy bueno</td>\n",
       "      <td>toy</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        stars                                        review_body  \\\n",
       "160000      5  Es muy práctico para cuando me voy de vacacion...   \n",
       "160001      5  Cumple su función calidad precio bien. Buen ma...   \n",
       "160002      5                       Perfecto.. Es lo que buscaba   \n",
       "160003      5  MUY BUENA RELACIÓN CALIDAD-PRECIO, ES SILENCIO...   \n",
       "160004      5  a mi hija le encanta, aunque hubiera preferido...   \n",
       "\n",
       "                                 review_title product_category  \n",
       "160000                               Muy útil  lawn_and_garden  \n",
       "160001  Luz Ultravioleta en led bien diseñada             home  \n",
       "160002                               Perfecto         wireless  \n",
       "160003                  MUY BUENA DESTRUCTORA   office_product  \n",
       "160004                              muy bueno              toy  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_punataje_5 = df_train[df_train.stars==5]\n",
    "dataset_punataje_5.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El puntaje 5 son todos comentarios 100% positivos tanto en el cuerpo como en el título"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "todos_titulares_puntaje_1 = []\n",
    "for i in range(dataset_punataje_1.shape[0]):\n",
    "    titular = dataset_punataje_1.iloc[i].review_title\n",
    "    titular = nltk.tokenize.RegexpTokenizer(\"[\\w]+\").tokenize(titular)\n",
    "    titular = [word for word in titular if word not in stopwords]\n",
    "    titular = [word for word in titular if word not in filtrar]\n",
    "\n",
    "    todos_titulares_puntaje_1.append(titular)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['television',\n",
       " 'Nevir',\n",
       " 'Dinero',\n",
       " 'tirado',\n",
       " 'basura',\n",
       " 'compra',\n",
       " 'solo',\n",
       " 'llega',\n",
       " 'unidad',\n",
       " 'obligan']"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "todos_titulares_puntaje_1 = list(itertools.chain(*todos_titulares_puntaje_1))\n",
    "todos_titulares_puntaje_1[0:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cuando tokenizamos los titulares del puntaje 1 vemos que por separado algunas palabras podrían clasificarse como negativa. En este caso, de las 10 palabras que observamos solo 2 se pueden considerar negativas: tirado y basura."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "todos_cuerpo_puntaje_1 = []\n",
    "for i in range(dataset_punataje_1.shape[0]):\n",
    "    cuerpo = dataset_punataje_1.iloc[i].review_body\n",
    "    cuerpo = nltk.tokenize.RegexpTokenizer(\"[\\w]+\").tokenize(cuerpo)\n",
    "    cuerpo = [word for word in cuerpo if word not in stopwords]\n",
    "    cuerpo = [word for word in cuerpo if word not in filtrar]\n",
    "\n",
    "    todos_cuerpo_puntaje_1.append(cuerpo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Nada',\n",
       " 'bueno',\n",
       " 'ka',\n",
       " 'pantalla',\n",
       " 'menos',\n",
       " '8',\n",
       " 'meses',\n",
       " 'recibido',\n",
       " 'respuesta',\n",
       " 'fabricante']"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "todos_cuerpo_puntaje_1 = list(itertools.chain(*todos_cuerpo_puntaje_1))\n",
    "todos_cuerpo_puntaje_1[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "todos_titulares_puntaje_2 = []\n",
    "for i in range(dataset_punataje_2.shape[0]):\n",
    "    titular = dataset_punataje_2.iloc[i].review_title\n",
    "    titular = nltk.tokenize.RegexpTokenizer(\"[\\w]+\").tokenize(titular)\n",
    "    titular = [word for word in titular if word not in stopwords]\n",
    "    titular = [word for word in titular if word not in filtrar]\n",
    "\n",
    "    todos_titulares_puntaje_2.append(titular)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Regular',\n",
       " 'LAS',\n",
       " 'IMPRESIONES',\n",
       " 'NO',\n",
       " 'SON',\n",
       " 'DE',\n",
       " 'MUY',\n",
       " 'BUENA',\n",
       " 'CALIDAD',\n",
       " 'pequeño']"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "todos_titulares_puntaje_2 = list(itertools.chain(*todos_titulares_puntaje_2))\n",
    "todos_titulares_puntaje_2[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "todos_cuerpo_puntaje_2 = []\n",
    "for i in range(dataset_punataje_2.shape[0]):\n",
    "    cuerpo = dataset_punataje_2.iloc[i].review_body\n",
    "    cuerpo = nltk.tokenize.RegexpTokenizer(\"[\\w]+\").tokenize(cuerpo)\n",
    "    cuerpo = [word for word in cuerpo if word not in stopwords]\n",
    "    cuerpo = [word for word in cuerpo if word not in filtrar]\n",
    "\n",
    "    todos_cuerpo_puntaje_2.append(cuerpo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Los',\n",
       " 'tornillos',\n",
       " 'ajustan',\n",
       " 'bien',\n",
       " 'caen',\n",
       " 'No',\n",
       " 'volvería',\n",
       " 'comprar',\n",
       " 'Si',\n",
       " 'haces']"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "todos_cuerpo_puntaje_2 = list(itertools.chain(*todos_cuerpo_puntaje_2))\n",
    "todos_cuerpo_puntaje_2[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "todos_titulares_puntaje_3 = []\n",
    "for i in range(dataset_punataje_3.shape[0]):\n",
    "    titular = dataset_punataje_3.iloc[i].review_title\n",
    "    titular = nltk.tokenize.RegexpTokenizer(\"[\\w]+\").tokenize(titular)\n",
    "    titular = [word for word in titular if word not in stopwords]\n",
    "    titular = [word for word in titular if word not in filtrar]\n",
    "\n",
    "    todos_titulares_puntaje_3.append(titular)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['buena',\n",
       " 'funda',\n",
       " 'movil',\n",
       " '5',\n",
       " '5',\n",
       " 'Aparato',\n",
       " 'perfecto',\n",
       " 'verduras',\n",
       " 'cebollas',\n",
       " 'patatas']"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "todos_titulares_puntaje_3 = list(itertools.chain(*todos_titulares_puntaje_3))\n",
    "todos_titulares_puntaje_3[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "todos_cuerpo_puntaje_3 = []\n",
    "for i in range(dataset_punataje_3.shape[0]):\n",
    "    cuerpo = dataset_punataje_3.iloc[i].review_body\n",
    "    cuerpo = nltk.tokenize.RegexpTokenizer(\"[\\w]+\").tokenize(cuerpo)\n",
    "    cuerpo = [word for word in cuerpo if word not in stopwords]\n",
    "    cuerpo = [word for word in cuerpo if word not in filtrar]\n",
    "\n",
    "    todos_cuerpo_puntaje_3.append(cuerpo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['cabe',\n",
       " 'bien',\n",
       " 'móvil',\n",
       " '5',\n",
       " '5',\n",
       " 'cumple',\n",
       " 'función',\n",
       " 'hecha',\n",
       " 'menos',\n",
       " 'pequeño']"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "todos_cuerpo_puntaje_3 = list(itertools.chain(*todos_cuerpo_puntaje_3))\n",
    "todos_cuerpo_puntaje_3[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "todos_titulares_puntaje_4 = []\n",
    "for i in range(dataset_punataje_4.shape[0]):\n",
    "    titular = dataset_punataje_4.iloc[i].review_title\n",
    "    titular = nltk.tokenize.RegexpTokenizer(\"[\\w]+\").tokenize(titular)\n",
    "    titular = [word for word in titular if word not in stopwords]\n",
    "    titular = [word for word in titular if word not in filtrar]\n",
    "\n",
    "    todos_titulares_puntaje_4.append(titular)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Calidad',\n",
       " 'Falta',\n",
       " 'factura',\n",
       " 'Bueno',\n",
       " 'Material',\n",
       " 'duradero',\n",
       " 'Buena',\n",
       " 'Deja',\n",
       " 'buen',\n",
       " 'olor']"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "todos_titulares_puntaje_4 = list(itertools.chain(*todos_titulares_puntaje_4))\n",
    "todos_titulares_puntaje_4[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "todos_cuerpo_puntaje_4 = []\n",
    "for i in range(dataset_punataje_4.shape[0]):\n",
    "    cuerpo = dataset_punataje_4.iloc[i].review_body\n",
    "    cuerpo = nltk.tokenize.RegexpTokenizer(\"[\\w]+\").tokenize(cuerpo)\n",
    "    cuerpo = [word for word in cuerpo if word not in stopwords]\n",
    "    cuerpo = [word for word in cuerpo if word not in filtrar]\n",
    "\n",
    "    todos_cuerpo_puntaje_4.append(cuerpo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Tiene',\n",
       " 'buena',\n",
       " 'pinta',\n",
       " 'veremos',\n",
       " 'resultado',\n",
       " 'Entrega',\n",
       " 'rápida',\n",
       " 'siempre',\n",
       " 'falta',\n",
       " 'factura']"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "todos_cuerpo_puntaje_4 = list(itertools.chain(*todos_cuerpo_puntaje_4))\n",
    "todos_cuerpo_puntaje_4[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "todos_titulares_puntaje_5 = []\n",
    "for i in range(dataset_punataje_5.shape[0]):\n",
    "    titular = dataset_punataje_5.iloc[i].review_title\n",
    "    titular = nltk.tokenize.RegexpTokenizer(\"[\\w]+\").tokenize(titular)\n",
    "    titular = [word for word in titular if word not in stopwords]\n",
    "    titular = [word for word in titular if word not in filtrar]\n",
    "\n",
    "    todos_titulares_puntaje_5.append(titular)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Muy',\n",
       " 'útil',\n",
       " 'Luz',\n",
       " 'Ultravioleta',\n",
       " 'led',\n",
       " 'bien',\n",
       " 'diseñada',\n",
       " 'Perfecto',\n",
       " 'MUY',\n",
       " 'BUENA']"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "todos_titulares_puntaje_5 = list(itertools.chain(*todos_titulares_puntaje_5))\n",
    "todos_titulares_puntaje_5[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "todos_cuerpo_puntaje_5 = []\n",
    "for i in range(dataset_punataje_5.shape[0]):\n",
    "    cuerpo = dataset_punataje_5.iloc[i].review_body\n",
    "    cuerpo = nltk.tokenize.RegexpTokenizer(\"[\\w]+\").tokenize(cuerpo)\n",
    "    cuerpo = [word for word in cuerpo if word not in stopwords]\n",
    "    cuerpo = [word for word in cuerpo if word not in filtrar]\n",
    "\n",
    "    todos_cuerpo_puntaje_5.append(cuerpo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Es',\n",
       " 'práctico',\n",
       " 'voy',\n",
       " 'vacaciones',\n",
       " 'preocupar',\n",
       " 'si',\n",
       " 'seguirán',\n",
       " 'vivas',\n",
       " 'plantas',\n",
       " 'vuelva']"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "todos_cuerpo_puntaje_5 = list(itertools.chain(*todos_cuerpo_puntaje_5))\n",
    "todos_cuerpo_puntaje_5[0:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora vamos a ver la frecuencia de palabras por puntaje"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FreqDist({'No': 8572, 'calidad': 2049, 'Mala': 1372, 'Muy': 1165, 'producto': 1160, 'funciona': 1124, 'NO': 889, 'Mal': 869, 'mala': 759, 'llegado': 758, ...})"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_puntaje_1 = nltk.FreqDist(todos_titulares_puntaje_1)\n",
    "freq_puntaje_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FreqDist({'No': 13605, 'producto': 6735, 'El': 5266, 'bien': 4397, 'calidad': 4090, 'si': 3947, 'La': 3806, 'llegado': 3349, 'dos': 3209, 'Lo': 2770, ...})"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_puntaje_1_cuerpo = nltk.FreqDist(todos_cuerpo_puntaje_1)\n",
    "freq_puntaje_1_cuerpo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FreqDist({'No': 6894, 'calidad': 2258, 'bien': 1270, 'Muy': 1073, 'Mala': 886, 'Se': 878, 'mal': 706, 'El': 639, 'Regular': 628, 'precio': 617, ...})"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_puntaje_2 = nltk.FreqDist(todos_titulares_puntaje_2)\n",
    "freq_puntaje_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FreqDist({'No': 9909, 'bien': 9462, 'El': 6745, 'La': 5632, 'calidad': 5530, 'si': 5529, 'producto': 4392, 'Es': 3276, 'dos': 3179, 'precio': 3172, ...})"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_puntaje_2_cuerpo = nltk.FreqDist(todos_cuerpo_puntaje_2)\n",
    "freq_puntaje_2_cuerpo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FreqDist({'No': 3486, 'bien': 2265, 'calidad': 1742, 'precio': 1671, 'Bien': 1336, 'mal': 985, 'Buena': 976, 'Muy': 961, 'Buen': 903, 'producto': 747, ...})"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_puntaje_3 = nltk.FreqDist(todos_titulares_puntaje_3)\n",
    "freq_puntaje_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FreqDist({'bien': 13465, 'El': 6466, 'No': 6060, 'calidad': 5462, 'si': 5437, 'precio': 5225, 'La': 5079, 'Es': 3992, 'producto': 3749, 'bastante': 3171, ...})"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_puntaje_3_cuerpo = nltk.FreqDist(todos_cuerpo_puntaje_3)\n",
    "freq_puntaje_3_cuerpo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FreqDist({'precio': 3061, 'Buena': 2849, 'calidad': 2846, 'bien': 2657, 'Muy': 2459, 'Buen': 2188, 'producto': 1554, 'Bien': 1301, 'buena': 1184, 'compra': 996, ...})"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_puntaje_4 = nltk.FreqDist(todos_titulares_puntaje_4)\n",
    "freq_puntaje_4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FreqDist({'bien': 13687, 'calidad': 6887, 'precio': 6840, 'El': 5104, 'buena': 4565, 'La': 4530, 'Es': 4469, 'producto': 3939, 'si': 3828, 'bastante': 3419, ...})"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_puntaje_4_cuerpo = nltk.FreqDist(todos_cuerpo_puntaje_4)\n",
    "freq_puntaje_4_cuerpo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FreqDist({'Muy': 4029, 'calidad': 2821, 'Buena': 2233, 'precio': 2176, 'Perfecto': 1905, 'Buen': 1686, 'producto': 1539, 'bien': 1522, 'buena': 1386, 'compra': 1240, ...})"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_puntaje_5 = nltk.FreqDist(todos_titulares_puntaje_5)\n",
    "freq_puntaje_5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FreqDist({'bien': 9050, 'calidad': 7678, 'precio': 5641, 'buena': 5433, 'Muy': 5413, 'Es': 4737, 'producto': 3955, 'El': 3947, 'La': 3920, 'perfecto': 3549, ...})"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_puntaje_5_cuerpo = nltk.FreqDist(todos_cuerpo_puntaje_5)\n",
    "freq_puntaje_5_cuerpo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora vamos a crear un dataframe por puntaje con las palabras y su frecuencia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>television</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Nevir</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Dinero</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tirado</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>basura</td>\n",
       "      <td>134</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Word  Frequency\n",
       "0  television          1\n",
       "1       Nevir          1\n",
       "2      Dinero         85\n",
       "3      tirado         80\n",
       "4      basura        134"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_1 = pd.DataFrame(list(freq_puntaje_1.items()), columns = [\"Word\",\"Frequency\"])\n",
    "df_puntaje_1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Podemos ver que en el puntaje 1 una palabra que se repite 134 veces es basura"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Nada</td>\n",
       "      <td>411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>bueno</td>\n",
       "      <td>508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ka</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>pantalla</td>\n",
       "      <td>1743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>menos</td>\n",
       "      <td>1495</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Word  Frequency\n",
       "0      Nada        411\n",
       "1     bueno        508\n",
       "2        ka          4\n",
       "3  pantalla       1743\n",
       "4     menos       1495"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_1_cuerpo = pd.DataFrame(list(freq_puntaje_1_cuerpo.items()), columns = [\"Word\",\"Frequency\"])\n",
    "df_puntaje_1_cuerpo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Regular</td>\n",
       "      <td>628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LAS</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>IMPRESIONES</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NO</td>\n",
       "      <td>433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SON</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Word  Frequency\n",
       "0      Regular        628\n",
       "1          LAS         25\n",
       "2  IMPRESIONES          1\n",
       "3           NO        433\n",
       "4          SON         12"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_2 = pd.DataFrame(list(freq_puntaje_2.items()), columns = [\"Word\",\"Frequency\"])\n",
    "df_puntaje_2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En el puntaje 2 una palabra que se repite es regular y tiene sentido si se clasifica con el segundo peor puntaje. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Los</td>\n",
       "      <td>1278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tornillos</td>\n",
       "      <td>363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ajustan</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>bien</td>\n",
       "      <td>9462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>caen</td>\n",
       "      <td>156</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Word  Frequency\n",
       "0        Los       1278\n",
       "1  tornillos        363\n",
       "2    ajustan        101\n",
       "3       bien       9462\n",
       "4       caen        156"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_2_cuerpo = pd.DataFrame(list(freq_puntaje_2_cuerpo.items()), columns = [\"Word\",\"Frequency\"])\n",
    "df_puntaje_2_cuerpo.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Viendo las primeras palabras que aparecen en nuestro dataframe del cuerpo del puntaje 2, no nos da indicio del puntaje ya que no hay una palabra que podamos considerar negativa."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>buena</td>\n",
       "      <td>446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>funda</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>movil</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Aparato</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Word  Frequency\n",
       "0    buena        446\n",
       "1    funda        125\n",
       "2    movil         32\n",
       "3        5         49\n",
       "4  Aparato          5"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_3 = pd.DataFrame(list(freq_puntaje_3.items()), columns = [\"Word\",\"Frequency\"])\n",
    "df_puntaje_3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>cabe</td>\n",
       "      <td>161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>bien</td>\n",
       "      <td>13465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>móvil</td>\n",
       "      <td>749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cumple</td>\n",
       "      <td>1264</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Word  Frequency\n",
       "0    cabe        161\n",
       "1    bien      13465\n",
       "2   móvil        749\n",
       "3       5        685\n",
       "4  cumple       1264"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_3_cuerpo = pd.DataFrame(list(freq_puntaje_3_cuerpo.items()), columns = [\"Word\",\"Frequency\"])\n",
    "df_puntaje_3_cuerpo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Calidad</td>\n",
       "      <td>901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Falta</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>factura</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bueno</td>\n",
       "      <td>581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Material</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Word  Frequency\n",
       "0   Calidad        901\n",
       "1     Falta         21\n",
       "2   factura          4\n",
       "3     Bueno        581\n",
       "4  Material         24"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_4 = pd.DataFrame(list(freq_puntaje_4.items()), columns = [\"Word\",\"Frequency\"])\n",
    "df_puntaje_4.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Tiene</td>\n",
       "      <td>655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>buena</td>\n",
       "      <td>4565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>pinta</td>\n",
       "      <td>211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>veremos</td>\n",
       "      <td>123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>resultado</td>\n",
       "      <td>396</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Word  Frequency\n",
       "0      Tiene        655\n",
       "1      buena       4565\n",
       "2      pinta        211\n",
       "3    veremos        123\n",
       "4  resultado        396"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_4_cuerpo = pd.DataFrame(list(freq_puntaje_4_cuerpo.items()), columns = [\"Word\",\"Frequency\"])\n",
    "df_puntaje_4_cuerpo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Muy</td>\n",
       "      <td>4029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>útil</td>\n",
       "      <td>243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Luz</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ultravioleta</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>led</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Word  Frequency\n",
       "0           Muy       4029\n",
       "1          útil        243\n",
       "2           Luz         43\n",
       "3  Ultravioleta          1\n",
       "4           led         29"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_5 = pd.DataFrame(list(freq_puntaje_5.items()), columns = [\"Word\",\"Frequency\"])\n",
    "df_puntaje_5.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Es</td>\n",
       "      <td>4737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>práctico</td>\n",
       "      <td>542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>voy</td>\n",
       "      <td>184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>vacaciones</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>preocupar</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Word  Frequency\n",
       "0          Es       4737\n",
       "1    práctico        542\n",
       "2         voy        184\n",
       "3  vacaciones         45\n",
       "4   preocupar          3"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_5_cuerpo = pd.DataFrame(list(freq_puntaje_5_cuerpo.items()), columns = [\"Word\",\"Frequency\"])\n",
    "df_puntaje_5_cuerpo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>No</td>\n",
       "      <td>8572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>calidad</td>\n",
       "      <td>2049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Mala</td>\n",
       "      <td>1372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>Muy</td>\n",
       "      <td>1165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>producto</td>\n",
       "      <td>1160</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Word  Frequency\n",
       "21        No       8572\n",
       "24   calidad       2049\n",
       "23      Mala       1372\n",
       "64       Muy       1165\n",
       "74  producto       1160"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_1.sort_values('Frequency',ascending=False, inplace = True)\n",
    "df_puntaje_1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora si lo vemos de forma descendente y vemos primero las palabras con layor frecuencia, del puntaje 1 la tercer palabra con mayor frecuencia nos da indicio del puntaje. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>No</td>\n",
       "      <td>13605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>producto</td>\n",
       "      <td>6735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>El</td>\n",
       "      <td>5266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>bien</td>\n",
       "      <td>4397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>calidad</td>\n",
       "      <td>4090</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Word  Frequency\n",
       "30         No      13605\n",
       "39   producto       6735\n",
       "73         El       5266\n",
       "110      bien       4397\n",
       "76    calidad       4090"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_1_cuerpo.sort_values('Frequency',ascending=False, inplace = True)\n",
    "df_puntaje_1_cuerpo.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sin embargo en el cuerpo del puntaje 1, las que más se repiten no  nos ayudan a predecir el puntaje. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>No</td>\n",
       "      <td>6894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>calidad</td>\n",
       "      <td>2258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>bien</td>\n",
       "      <td>1270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Muy</td>\n",
       "      <td>1073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165</th>\n",
       "      <td>Mala</td>\n",
       "      <td>886</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Word  Frequency\n",
       "10        No       6894\n",
       "28   calidad       2258\n",
       "30      bien       1270\n",
       "49       Muy       1073\n",
       "165     Mala        886"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_2.sort_values('Frequency',ascending=False, inplace = True)\n",
    "df_puntaje_2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En el puntaje 2, recién la quinta palabra con mayor frecuencia nos da inidicio del puntaje, aunque no también es una palabra con connotación negativa. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>No</td>\n",
       "      <td>9909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>bien</td>\n",
       "      <td>9462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>El</td>\n",
       "      <td>6745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>La</td>\n",
       "      <td>5632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>calidad</td>\n",
       "      <td>5530</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Word  Frequency\n",
       "5         No       9909\n",
       "3       bien       9462\n",
       "76        El       6745\n",
       "96        La       5632\n",
       "107  calidad       5530"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_2_cuerpo.sort_values('Frequency',ascending=False, inplace = True)\n",
    "df_puntaje_2_cuerpo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>No</td>\n",
       "      <td>3486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>bien</td>\n",
       "      <td>2265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>calidad</td>\n",
       "      <td>1742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>precio</td>\n",
       "      <td>1671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>264</th>\n",
       "      <td>Bien</td>\n",
       "      <td>1336</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Word  Frequency\n",
       "57        No       3486\n",
       "19      bien       2265\n",
       "61   calidad       1742\n",
       "28    precio       1671\n",
       "264     Bien       1336"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_3.sort_values('Frequency',ascending=False, inplace = True)\n",
    "df_puntaje_3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>bien</td>\n",
       "      <td>13465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>El</td>\n",
       "      <td>6466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>No</td>\n",
       "      <td>6060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>calidad</td>\n",
       "      <td>5462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>si</td>\n",
       "      <td>5437</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Word  Frequency\n",
       "1       bien      13465\n",
       "15        El       6466\n",
       "73        No       6060\n",
       "140  calidad       5462\n",
       "57        si       5437"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_3_cuerpo.sort_values('Frequency',ascending=False, inplace = True)\n",
    "df_puntaje_3_cuerpo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>precio</td>\n",
       "      <td>3061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Buena</td>\n",
       "      <td>2849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>calidad</td>\n",
       "      <td>2846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>bien</td>\n",
       "      <td>2657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Muy</td>\n",
       "      <td>2459</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Word  Frequency\n",
       "53   precio       3061\n",
       "6     Buena       2849\n",
       "83  calidad       2846\n",
       "14     bien       2657\n",
       "28      Muy       2459"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_4.sort_values('Frequency',ascending=False, inplace = True)\n",
    "df_puntaje_4.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>bien</td>\n",
       "      <td>13687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>calidad</td>\n",
       "      <td>6887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>precio</td>\n",
       "      <td>6840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171</th>\n",
       "      <td>El</td>\n",
       "      <td>5104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>buena</td>\n",
       "      <td>4565</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Word  Frequency\n",
       "11      bien      13687\n",
       "30   calidad       6887\n",
       "117   precio       6840\n",
       "171       El       5104\n",
       "1      buena       4565"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_4_cuerpo.sort_values('Frequency',ascending=False, inplace = True)\n",
    "df_puntaje_4_cuerpo.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Las palabras del puntaje 4, tanto en título como cuerpo, nos dan indicio del puntaje ya que la mayoría tienen sentido con el puntaje. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Muy</td>\n",
       "      <td>4029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>calidad</td>\n",
       "      <td>2821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Buena</td>\n",
       "      <td>2233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>precio</td>\n",
       "      <td>2176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Perfecto</td>\n",
       "      <td>1905</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Word  Frequency\n",
       "0        Muy       4029\n",
       "16   calidad       2821\n",
       "15     Buena       2233\n",
       "17    precio       2176\n",
       "7   Perfecto       1905"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_5.sort_values('Frequency',ascending=False, inplace = True)\n",
    "df_puntaje_5.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>bien</td>\n",
       "      <td>9050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>calidad</td>\n",
       "      <td>7678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>precio</td>\n",
       "      <td>5641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>buena</td>\n",
       "      <td>5433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>Muy</td>\n",
       "      <td>5413</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Word  Frequency\n",
       "28      bien       9050\n",
       "26   calidad       7678\n",
       "27    precio       5641\n",
       "119    buena       5433\n",
       "57       Muy       5413"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_5_cuerpo.sort_values('Frequency',ascending=False, inplace = True)\n",
    "df_puntaje_5_cuerpo.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "También con el puntaje 5 vemos que las palabras de mayor frencuencia ayudan descifrar el puntaje. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>No</td>\n",
       "      <td>8572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>calidad</td>\n",
       "      <td>2049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mala</td>\n",
       "      <td>1372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Muy</td>\n",
       "      <td>1165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>producto</td>\n",
       "      <td>1160</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Word  Frequency\n",
       "0        No       8572\n",
       "1   calidad       2049\n",
       "2      Mala       1372\n",
       "3       Muy       1165\n",
       "4  producto       1160"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_1.reset_index(drop = True, inplace=True)\n",
    "df_puntaje_1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>No</td>\n",
       "      <td>13605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>producto</td>\n",
       "      <td>6735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>El</td>\n",
       "      <td>5266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>bien</td>\n",
       "      <td>4397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>calidad</td>\n",
       "      <td>4090</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Word  Frequency\n",
       "0        No      13605\n",
       "1  producto       6735\n",
       "2        El       5266\n",
       "3      bien       4397\n",
       "4   calidad       4090"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_1_cuerpo.reset_index(drop = True, inplace=True)\n",
    "df_puntaje_1_cuerpo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>No</td>\n",
       "      <td>6894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>calidad</td>\n",
       "      <td>2258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>bien</td>\n",
       "      <td>1270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Muy</td>\n",
       "      <td>1073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Mala</td>\n",
       "      <td>886</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Word  Frequency\n",
       "0       No       6894\n",
       "1  calidad       2258\n",
       "2     bien       1270\n",
       "3      Muy       1073\n",
       "4     Mala        886"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_2.reset_index(drop = True, inplace=True)\n",
    "df_puntaje_2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>No</td>\n",
       "      <td>9909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>bien</td>\n",
       "      <td>9462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>El</td>\n",
       "      <td>6745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>La</td>\n",
       "      <td>5632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>calidad</td>\n",
       "      <td>5530</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Word  Frequency\n",
       "0       No       9909\n",
       "1     bien       9462\n",
       "2       El       6745\n",
       "3       La       5632\n",
       "4  calidad       5530"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_2_cuerpo.reset_index(drop = True, inplace=True)\n",
    "df_puntaje_2_cuerpo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>No</td>\n",
       "      <td>3486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>bien</td>\n",
       "      <td>2265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>calidad</td>\n",
       "      <td>1742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>precio</td>\n",
       "      <td>1671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bien</td>\n",
       "      <td>1336</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Word  Frequency\n",
       "0       No       3486\n",
       "1     bien       2265\n",
       "2  calidad       1742\n",
       "3   precio       1671\n",
       "4     Bien       1336"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_3.reset_index(drop = True, inplace=True)\n",
    "df_puntaje_3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>bien</td>\n",
       "      <td>13465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>El</td>\n",
       "      <td>6466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>No</td>\n",
       "      <td>6060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>calidad</td>\n",
       "      <td>5462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>si</td>\n",
       "      <td>5437</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Word  Frequency\n",
       "0     bien      13465\n",
       "1       El       6466\n",
       "2       No       6060\n",
       "3  calidad       5462\n",
       "4       si       5437"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_3_cuerpo.reset_index(drop = True, inplace=True)\n",
    "df_puntaje_3_cuerpo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>precio</td>\n",
       "      <td>3061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Buena</td>\n",
       "      <td>2849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>calidad</td>\n",
       "      <td>2846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>bien</td>\n",
       "      <td>2657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Muy</td>\n",
       "      <td>2459</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Word  Frequency\n",
       "0   precio       3061\n",
       "1    Buena       2849\n",
       "2  calidad       2846\n",
       "3     bien       2657\n",
       "4      Muy       2459"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_4.reset_index(drop = True, inplace=True)\n",
    "df_puntaje_4.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>bien</td>\n",
       "      <td>13687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>calidad</td>\n",
       "      <td>6887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>precio</td>\n",
       "      <td>6840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>El</td>\n",
       "      <td>5104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>buena</td>\n",
       "      <td>4565</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Word  Frequency\n",
       "0     bien      13687\n",
       "1  calidad       6887\n",
       "2   precio       6840\n",
       "3       El       5104\n",
       "4    buena       4565"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_4_cuerpo.reset_index(drop = True, inplace=True)\n",
    "df_puntaje_4_cuerpo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Muy</td>\n",
       "      <td>4029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>calidad</td>\n",
       "      <td>2821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Buena</td>\n",
       "      <td>2233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>precio</td>\n",
       "      <td>2176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Perfecto</td>\n",
       "      <td>1905</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Word  Frequency\n",
       "0       Muy       4029\n",
       "1   calidad       2821\n",
       "2     Buena       2233\n",
       "3    precio       2176\n",
       "4  Perfecto       1905"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_5.reset_index(drop = True, inplace=True)\n",
    "df_puntaje_5.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>bien</td>\n",
       "      <td>9050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>calidad</td>\n",
       "      <td>7678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>precio</td>\n",
       "      <td>5641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>buena</td>\n",
       "      <td>5433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Muy</td>\n",
       "      <td>5413</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Word  Frequency\n",
       "0     bien       9050\n",
       "1  calidad       7678\n",
       "2   precio       5641\n",
       "3    buena       5433\n",
       "4      Muy       5413"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_puntaje_5_cuerpo.reset_index(drop = True, inplace=True)\n",
    "df_puntaje_5_cuerpo.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora vamos a graficar las palabras según su frecuencia por puntaje"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,8))\n",
    "plot = sns.barplot(x  = df_puntaje_1.iloc[:30].Word, y = df_puntaje_1.iloc[:30].Frequency)\n",
    "for item in plot.get_xticklabels():\n",
    "    item.set_rotation(90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vemos que hay muchas palabras que comparten raíz que se repiten (mala, mal, Mala, Mal, malo, Malo) y las deberíamos llevar a raíz entonces nos sirve para entender el puntaje. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,8))\n",
    "plot = sns.barplot(x  = df_puntaje_1_cuerpo.iloc[:30].Word, y = df_puntaje_1_cuerpo.iloc[:30].Frequency)\n",
    "for item in plot.get_xticklabels():\n",
    "    item.set_rotation(90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,8))\n",
    "plot = sns.barplot(x  = df_puntaje_2.iloc[:30].Word, y = df_puntaje_2.iloc[:30].Frequency)\n",
    "for item in plot.get_xticklabels():\n",
    "    item.set_rotation(90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,8))\n",
    "plot = sns.barplot(x  = df_puntaje_2_cuerpo.iloc[:30].Word, y = df_puntaje_2_cuerpo.iloc[:30].Frequency)\n",
    "for item in plot.get_xticklabels():\n",
    "    item.set_rotation(90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,8))\n",
    "plot = sns.barplot(x  = df_puntaje_3.iloc[:30].Word, y = df_puntaje_3.iloc[:30].Frequency)\n",
    "for item in plot.get_xticklabels():\n",
    "    item.set_rotation(90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vemos que No sigue siendo la palabra más frecuente"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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OZKkw4cPa+3atcrPzzdW6/z589q/f79cLpfOnz9vrI7dfu11zPTr2f79+43t+2o88fNLT0+3pY4nHD16VGvXrpXT6bTldSU3N1c//PCD9u3bp7y8POP1JPv+Dg0fPtx4jWvJzs42tm+7f88l6YcfflBcXJw++OAD7du3z/b6KDruk1gEBw4cUHp6ui79Vj3wwANurVG7dm05HI4rtrtcLjkcDmO/SC6XSx9//LE2bdqkvLw8NWrUSD169FCJEu47f7B169Zrft7d38tnn31W7777rlq0aCGHw2F9Dwt88cUXbq13KTu+nwVycnK0bt06ZWZmSpKcTqeOHj2qQYMGub2WJC1atEjbt2/XkCFD1L59e912221q166d+vbta6SeJK1bt67Q97Jly5bGaqWnp2vKlCk6cuSIZsyYocmTJ2vYsGG6/fbbjdSbP3++Xn/9dWVlZVnbKleurFWrVhmpZ+exKUlvvfWWfvrpJ7388suKjo5WjRo1VKNGDY0aNcrttTZu3KgxY8bI6XRqwYIFioiI0BtvvKFmzZq5vVYBu46XS1/HLudwOIy9nrVu3VorVqwwsu/L2f3z27dvn1544QVlZ2drwYIF6t69u6ZPn646deoYqZeWlqZx48Zp06ZNcjqdatSokcaNG6c777zTSL3ExETNmjVLWVlZWrBggdq2bashQ4aoXbt2Rup99913GjRokMqWLav8/HydPHlSb7/9tho0aOD2Wp74O9SxY0d99NFHuu2224zVKLB69WpNmzZNWVlZcrlcys/PV1ZWljZt2mSknp2/55IUHx+vt956S48++qhcLpdWrVql5557Tp06dTJWc+/evTp//rxcLpf1PslUvWPHjikuLu6KzDBp0iQj9XJycvTTTz+pdu3aWrZsmfbu3aunn35a5cqVc8v+vd2yl2Js3LhxWrNmjapUqWJtczgc+uijj9xaZ/To0erWrZuki2dZatWqZX3ulVdecWutS73++us6fPiwOnbsKJfLpU8//VRHjx7VyJEj3VZjxowZkqQzZ87oyJEjuu+++1SiRAl9++23qlWrlubPn++2WpL07rvvSpKmTZum7du3q3v37urbt6/27Nmj119/3a21LmfH97PAiy++qPT0dB05ckTBwcHavHmz7rvvPrfXKfDxxx/rnXfe0fLly/Xoo49q5MiRio6ONvbH+V//+pc+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qlQxtrSj4O9QrVq15Ovrq7Zt2yokJMRIrQJ2Ln0YPHiwpk+frilTpui9997TggULjP6eHzt2TKNGjdKxY8c0d+5cvfTSS3r11Vd19913G6n3yiuvaMaMGRoxYoRcLpcaNWqksWPHGqklSRUqVNC7776rJk2aWL/jJk+mJyUlKS4uznovZrqvSO/evRUdHa0WLVqoVq1aCgsLc2tfChrX/IZLp31equCNq7t06NDBqnXpx1d77A6XXsErOENW8Av7yCOPGDmLm5OTo7i4OG3ZskWS9NBDD6lr167GzqgmJydr0aJFeuihh3TfffdpypQp6tGjhypWrGikXoEvv/xSGzdulMvlUuPGjdW8eXMjdZxOp7799lsFBwdr9erV2rBhg3788UfNnj3brXXsPjYLuFwuzZs3T5s3b7a+l126dDF69SstLU27du2S0+lUgwYNVKZMGVvOBtrl8mNz7dq1+sc//mGklt3TI+0SHx9vfXzq1Cn5+/vL6XQqOztbQUFBat++vZG60dHRiouL0/Lly5WRkaEnn3xSbdq00WeffWakXq9evdS5c2eFh4dLutgM5eOPPzZ25WHv3r269957lZGRod27d6tJkyZG6lzq/Pnzys/PLzQ104T9+/crKChIu3btUn5+vho0aKDy5csbq+d0OrV27Vo9+uijSktL0+rVq9WxY0fja6QKvp+SjH1Ps7Ky9OabbxZqAjR48GCVKlXKSD3p4gm2S5c+ZGVlKSoqypaGL+np6Uavcvfu3Vu9evVSbGyslixZokWLFikhIeGmf50ucO7cOa1bt05t2rRRXFycvv76az355JNq3LixW+sUnEyXrt5XxETDtgI5OTk6dOiQnE6natas6db31ITEIjh69Kj+97//qVmzZjpx4kShJjbuUrduXVWoUEHSxXBT8LHL5VJqaqq+++47t9b7tY55J0+eVG5urrGzHmfOnLG6dhV0mbLjzYBpe/bsUZ06dX61k6upReCXu++++9ze/KR9+/bWG+NLP77aY3d699139eyzzxbaNnXqVL344otG6nXu3FkLFiywHufn56tdu3ZatmyZkXpfffWVpk+ffkUXNJPddy9n4ngpEBUVpebNm2vNmjXW9Mjq1asbCaUFr2eXM/G9rF27tsqXL68mTZrIx8fnis+bmmUSFxen1atXKzY2Vp07d1bVqlXlcrn0/vvvG6l3td/tyMhII78PsbGx2rt3r/7zn/8oJSVFL730kh588EG3X1nv0aPHNYOSqXVYdneQHD58uPLz8zV58mSlpaVp0qRJKlmypLGrs2vWrNG2bdusLpVpaWkaOnSokUZVw4cPV8mSJRUdHS1JWrhwoTIyMoxeCY6IiNDy5cutxyb+Nnjq2IyKitKnn35a6Pe9Xbt2SkhIcGudyzv4e3t7y8vLSxcuXFBAQMBvdsH/I06dOqWdO3fK29tb9evXNzIV2lMn0013Fma66W8oaCWdnZ2t+fPnq0uXLkZaSa9cudKt+/stl3fMy8zM1OTJk7V+/Xpj02BmzJihDz/8UHl5ebrjjjuUnJysunXratGiRUbq2Wn+/PmaMGGC1cn1UiYXgV/O9DkfO6ZCx8bG6tSpU1q9erUOHTpkbXc6ndq5c6fbQ2LPnj2tq9uX/iHz8vJSixYt3FrrUq+88oqGDRummjVr2tIF7WpMHi92To+89OpWXl6e/vvf/xqbUrRkyRIlJibq66+/Vu3atfXYY4/poYceMroeUZIee+wx5efna968eXrwwQf13XffGe3e6uvra538kqTdu3erZMmSRmqtXbvWelMaFBSk2bNnq0OHDm4PiQX7W7hwofz9/dW+fXt5e3tr+fLlRpuf2N1Bcvfu3VaAKVeunKZMmWK0SdVbb72liRMnKjExUfXr19eYMWPUo0cPIyFxz549hZr+jBkzxmhjF8mepQ+eOjb9/f31yy+/WH+Dtm3bZmT2TMH9GMeOHav77rtPbdu2lcPh0MqVK/XVV1+5vV6BFStWaOLEibrvvvvkdDo1ZswYjR8/3u1TlD3VV8R0Z2FC4m+wq5V05cqV3bq/67Fx40aNGjVKTZs21dKlS41NE4mPj9e6des0ceJE9evXTz/99JPmzZtnpJbdCoL1nDlzdOrUKZUvX15ZWVlKSUkp1KzHNBNhw+4A06pVK/3444/atGmTGjVqZL3Aenl56bnnnnN7vYIAb3pKyOXuuOMOY41cisrkz7ZkyZLKycnRn//8Z+3Zs8fo+uPLXz/79OmjqKgoI8fLX//6V/31r3/VSy+9pO+++06JiYmaOnWq6tatqzZt2hhbN/v000/rnnvu0V133aVKlSpZTVBMGTlypAYMGKCyZcvK5XIpPT1d06ZNM1IrLy9P2dnZ1ppxU406HnzwQUnS5MmT9cknn1jbGzZsaOz2LJJnOkimpKQoKChI0sUrKaZPYtSuXVtvvvmm2rZtq9tuu83Yz9Dlcuns2bNWI6WzZ88aXYIgXfxd+PjjjxUfH29N1e/cubNba3jq2Bw+fLieffZZHTlyRO3atVN6err++c9/Gqu3a9cujRs3znocFhamWbNmGas3a9Ysffrpp9bvwrFjx9SvXz+j61jt7CtiurMwIfE32N1K2k7nz5/Xa6+9Zl09bNq0qdF6QUFBCggIUM2aNbV//361atVKb7zxhtGadpszZ44+/fRTLVmyRGlpaerbt6/+/ve/u/UPyq9NS3G5XEbOOB44cECPPvqopItToQs+LpgK7W7169dX/fr1FRoaqm+//bbQuhqTgXvo0KFau3atzpw5U2i7qTVm999/vyZNmqSHH3640L233H11we7jpUDbtm3Vt29fa3rkV199ZWw98KVTlVwulw4cOGC8Lb4k1atXT/Xq1dO2bdsUGxurZcuW6dtvvzVWz2RjnALJycl6/fXXdeDAATVp0kQdOnRQ6dKlVa1aNWPrc7t06aKoqCjryv2XX35p3RLKhAsXLujgwYOqVq2apIu3E8rLyzNWz+4Okn379lWHDh10//33S5J27typESNGGKt35513asKECdq9e7emTJmi1157zdiJ7169eunxxx/XI488IpfLpTVr1uiZZ54xUis1NVWBgYE6ceKEmjdvXqi/QEpKikqVKuX2qYt2H5sul0uRkZEKDQ3VhAkTdOLECaWnpxurV7JkSX3yySdq3bq18vPzlZCQYHTNpbe3d6Hb61SuXNlIHwxPzQYy3VmYNYm/YdiwYapbt67mz5+vKVOmaN68ecrOzjY6/90Ol149HDp0qPGun9LFs/sRERGqVKmS4uLi1Lt3b8XExOi///2v8dp2iYiI0MKFC61F9FlZWYqOjnbr2oWCqZG/puCMpLscO3bsmp839WbA7nU1gwYN0vHjx1W9evVCL/im1pj16NHjim0mri7YfbwUSEtL0/Lly3X27FmdOHHCmh45ZMgQt9e69HvpcDh0xx13qE+fPqpXr57ba0kX31ht3bpVSUlJ+vLLL/XXv/5V4eHheuSRR4w10Jg1a5buvPNONW7cuNCVE3c3Gevdu7dq1aqlRo0aWcsgTHbzLvDdd99p69at8vb2VnBwsO69915jtdavX69hw4apQoUKcrlcOnXqlN544w1jV7vt7iApXQz7O3bskLe3t+rVq2ddSTFhzpw5Onv2rHW7gczMTLlcLnXv3t1tNS5dH3vu3Dk5HA6rSU7p0qWNnMx79tln9e677xbq4XBpL4fMzEw1atToqstMfi+7j83o6GgNHDhQp0+f1ooVKzR69Gg9//zzha5mutOxY8c0YcIEbd68WQ6HQ02bNtWoUaOsPhzuUnC8rF69WhcuXCg0fbdUqVJuf02zu69IgUOHDikmJkZHjhyR9P86C//lL39xy/4Jib/h/PnzmjVrljZs2KD8/Hw1btxY/fv3N94NzbTatWvL29tbQUFBhd4QF7wImmj4kJycrM8++0xPPfWUXnvtNW3YsEHPPvussVtEeEJYWJg+++wz60xVXl6eOnToYKz5SXF2tSYZphpnSFJ4eLiSkpKM7PtW1LFjR2t65KWef/55D43IPcaOHauvvvpK9957r1q3bq0WLVoYW6t3qTfeeENxcXGFbkRt4rX60iYdubm5at++vbEOqpdatmyZ/ve//+nZZ5/V559/buwKfoGcnBz98MMPcjgcuueee4zet9DuDpJpaWlaunSpFdYKOgubui3F8OHDrY9zc3O1fft2BQcHu/VkekGNI0eO6MiRIwoNDVWJEiW0fv161ahRQ++9957bahVVfn6+Hn30Ua1Zs8at+7Xz2OzUqZMWL16sl156SQ8//LDat29vtCHd1WRnZxdaq+sOlx6TV+PukOipk+kFTHVqZrrpbyhVqpReeuklvfTSS54eilvZ2UGxQIUKFfTUU09JuniFtjhq2bKlnnzySbVu3dpalF0wPRPXx+51NdWrVy9UzzRPXF2wmx3TI6WLzYeuxZ1XZxcsWKCyZctq79692rt3r6ZOnVro86ZeW9esWaONGze6/c3U5S7t2Orj43PVDq7uFhsbq19++UV79uzR008/rU8++UT79+839nciPT1dU6ZM0ZEjRzRjxgyNHj1aw4YNMzbt7fTp02rWrJliY2PlcDgUHR1t9BYDgwcPVqVKlbRjxw61bNlSa9euNXZVXbryDfeZM2f0wgsvGKnRo0cPJSQkqFy5cpIu/iz79+/v1lqXu/x4mTx5soYPH64yZcq4vemg3cem3feTXr16taZPn17o1khZWVnatGmTW+tcKwRmZ2e7tZbkub4ie/fu1TvvvHNFl3R3/c0jJP6Kgpa1l7ftLWDqFhF2sfOA9mTrY7vFxMQoKSnJmjbVs2dPa644rs/V1tUU3KzZhOzsbIWHh1s3aS5gqrnEmDFj1Lt3b8XGxurOO+9URESEhg4dWmzuT9WyZUstWrTI+PRISapTp47S09P1+OOPW1OKfvnlFyPr2jxxgk26+Jqdnp5uPCRezo61NuvXr9eSJUvUoUMHBQQEaPbs2Wrbtq2xkDh69Gg1bdpUu3btUqlSpRQUFKSYmBhjV6Ps6iBZICUlRR999JEmT56sVq1aqU+fPnryySeN1btcqVKlfvPKyu+VkpJSaM1VyZIljayNv9TVjpeXX35Z7733ntt/jnYfm7GxsVq0aJFmzJih22+/XcnJyUZ7RUyaNEkTJkzQ7Nmz1bdvX61atUpZWVnG6tkVSj1l6NCh6ty5s7Eu6YTEX1FwT5Ndu3Zp/vz52rJli7y9vdW0aVNjbdyLK0+1PvaUwMBA1ahRQx07dtTOnTs9PZybVmRkpB588EFrXc2oUaOMXuW7/J6Mptl9dcFu58+f16uvvmp8eqR0sXHNpS2/69Wrp44dOxpZb+mpM8a5ublq06aNatasWejqnrtPYlzaqEr6f82qTC5FKJghUPAmJycnx+isgaNHj6pz5876+OOP5evrqxdeeEFt27Y1Vs/uDpIFV52qVaum/fv3q0GDBkbb8F/aHMvlcuno0aMKDQ01Uqt58+bq1auXWrVqJZfLpRUrVqh169ZGahWw83ix+9isUKFCoSUAMTExxmpJF9ePNm7cWN98840yMjIUExNj9BYmdodSu/n7+7t17e/lCIm/YcKECcrMzFRUVJTViemHH34wekWjuLK79bEnfPjhh1q1apVSUlLUunVrjRkzRp06dVLv3r09PbSbzltvvVXoccHVe1Nr2h588EHt3bvXOuPodDp19OhRY41d7L66YDe7pkdKFzsC/vjjj6pevbqkiyemiksX6gJ9+/a1pY7d9+yVLq4HHjx4sNLT0/XBBx9o6dKlioiIMFbPy8tLGRkZ1u/eoUOHjBwvl3aKrVevnkaPHq2AgAD95S9/Mfq73rhxYw0cOFBDhw7VU089pT179hhrqCSp0P0sCxpH1ahRw0it4cOHa+XKldqyZYscDoeeeuop40s67Dpe7K7lCf7+/jp48KCqV6+uLVu2qHHjxsZulyLZH0rt1qxZM82ZM0fNmjUr1CXdXTN2CIm/YceOHYUaZbRo0cLt90i8Vdjd+tgTlixZooULFyo6Olply5bV4sWL9fjjjxMS/6Dc3Fx99dVXhe4H5G6jRo3Sli1blJ6err/85S/av3+/7rvvPnXq1MlIvWHDhl1xdWH69OlGanmCndMjhwwZop49e1od5TIzM4vd7XVMnay4nCeulPbu3VsbNmzQXXfdpRMnTmjAgAFG7yE6YMAA9ejRQydOnNBzzz2nHTt2GFk/O2LECNWqVUuRkZFauXKlPvnkE1s6xfbv31/z58/X1q1b1aVLFzkcDqM/V7uOzQJhYWEKCwuzrZ5dx4vdtTxh8ODBmj59uqZMmaL33ntPCxYsMDo7z+5QareEhARJ0uzZs61t7pzxQXfT39CnTx+NHTtWVapUkST98ssvGjFihP7zn/94eGQ3H7taH3tSVFSUPv30U6s7GN1N3ScnJ0dPPfWU4uLijOy/RYsWWrlypSZMmKCePXsqKytLr732mtEpoLm5uTp06JCcTqfxqwt2e+qpp7Rr1y7j0yML5OTk6Pvvv5e/v7+qVatmtCMg3KugB4Cd0tLStGvXLjmdTjVo0EB33nmn22t4qlPsc889p9TUVNtu51PcpaWlad68eVqzZo3y8/NVv359BQYGGpvVYsexeaNIT083erFg69atiouL05QpU/TEE0/oyJEj6tSpk4YOHWqsZnHCX9FfUTDH/vTp02rbtq0eeOABeXl5afv27apZs6anh3dTqly5st555x1PD8OoBx98UJMnT1ZWVpZWrVqlBQsWqHHjxp4eVrGQmZmp48ePG9t/wT2+qlevru+//15t2rRRRkaGsXq/1qK7uLyRs2t6pHTxBFRcXNwVHd6Ky/eyuLvzzju1bds21a9f35YTJXZNZfdEp1hJ+umnn7idjxs9/fTTuueee4xe3S5g9zILu4wePVoTJkwotH71UqZOHv7444/W+t9PPvnEeCi127U677oDIfFXXDrH/lK9evWyeSQ3v8tvSHs5T3ULNGHIkCFauHCh7rnnHsXHxys0NFRdunTx9LBuSpceLy6XS+np6Uan7VaoUEHvvvuumjRpYt3fKycnx1i9S6do5eXl6YsvvnDbDXBvBHZOQRs8eLCCg4MVHBxsSzdOuNd33313RfMFh8NhSxdxO6ayF7Dr2PzTn/6k48ePG+kkfKvyxJRPO49N0zp37izp199bmxIXF1foPVhxCojStTvvugPTTWFcwb3nfq0ltqe6BZrQu3dvvf/++54eRrFw6fHicDhUpkwZt98o9lLnzp3TunXr1KZNG82ZM0cbNmzQ3//+dzVq1MhYzUu5XC498cQTmj9/vi31ihNPTFdE8WFqKnvdunULLadITk5WhQoVjHWKLbhKk5aWphMnTqh27dqFbj9j6mpNcTdr1izdeeedttzO53Kml1nYLScnRz/99JNq166tZcuWae/evXr66aet+166W58+fZSTk6MGDRoUauxys1+ZLXD5EidJatu2rZYuXeqW/XMlEcZt2LDhmp8vTiExKytLJ06cUKVKlTw9lJtWwQvdr2nfvr2RunPnzrVug9GjRw/16NFDU6dOtS0k/vjjj0pJSbGlVnFz//33a/Xq1WrWrFmxWtd5q0hLS9PSpUuVmZlp3cvs6NGjev31122pb2oqu92dYu2+SnOrsPN2PpczvczCbjExMbr77ruVk5OjN998U+3atdPw4cP17rvvGqnXsGFDI/u9UZjuhktIhHGbN2++5udNven3hLS0NLVo0ULly5cvdNaqOE2pNa3geDly5IgOHz6s0NBQeXl5af369apRo4bbj5fY2FidOnVKq1ev1qFDh6ztTqdTO3fu1IsvvujWegVq165daPrZHXfcYaxWcZeUlHTFmXa7pivijxs8eLAqVaqkHTt2qGXLllq7dq3q1atnrJ5dU9ntPgFqd5fRW4Wdt/O52rHZp08f43XtcvToUf3zn//UlClT1KlTJz3zzDNGu5s+//zzOn/+vI4cOaJatWopOzvb6O1g7Ga6Gy4hEcZdq3lEdna2jSMxb9asWVq3bp02bdokLy8vhYaGqkmTJp4e1k2l4Hjp0aOHli5dak1DSU9PV//+/d1er1WrVvrxxx+1adOmQm+yvLy89Nxzz7m9XoFdu3Zp/vz52rJli7y9vdW0aVOjfyyLs/Xr13t6CPgDUlJS9NFHH2ny5Mlq1aqV+vTpoyeffNJYvffff996nT5//rx69epl9IbUuLnZeTufAQMGyOFwyOVy6dixYypTpozKlCljzbC52U+qO51OpaWladWqVXrzzTeVmpqqCxcuGKu3ceNGjRkzRk6nUwsWLFBERITeeOMNNWvWzFhNO9WtW1ctW7bUmjVrdOLECf3tb3/T7t271bx5c7fsn5AI26xevVrTp0+3blaen5+v7Oxsbdy40dNDc5t33nlHFy5cUHR0tHUvyAMHDmjkyJGeHtpNJyUlRWXLlrUelyxZUqmpqW6vU79+fdWvX18tW7aUn5+ffH19dfjwYR08eFB/+tOf3F6vwIQJE5SZmamoqCjrWPnhhx84Vn6HyzsCFigu606Ku4JmEtWqVdP+/fuNN+q42uv0kSNH+N3DVeXm5qpNmza23M5n3bp12rZtm1q0aCFvb28tWbJEgYGBqlatmqSbPyT27t1b0dHRatGihWrVqqWwsDANGjTIWL2pU6dq3rx5evrppxUYGKi5c+fqxRdfLDYh0XTnXUIibDNp0iRNmDBBs2fPVt++fbVq1SplZWV5elhutXPnzkKtx1u0aKGIiAgPjujm1bx5c/Xq1UutWrWSy+XSihUr1Lp1a2P1PvroI/344496+eWX1a1bN9WsWVPr16/XqFGjjNTbsWNHoftntmjRQu3atTNS61ZSnDoC3ioaN26sgQMHatiwYerVq5f27Nlj9KoNr9O4HnbezictLU0JCQkqX768JCkjI0N9+/YtNrfziYyMVGRkpPU4MTHR6M3t8/PzFRgYaD2uUaOGsVqeYrLzLiERtildurQaN26sb775RhkZGYqJidFjjz3m6WG51d13363Dhw+ratWqkqSTJ08W6m6Hohs+fLhWrlypLVu2yOFw6KmnntKjjz5qrN4XX3yhefPm6aOPPlLbtm01ZMgQRUVFGatXoUIF/fzzz6pSpYqki1dOL/1jhqK7/Iph//799dRTT3loNLhe/fv310cffaTx48erWrVq+tOf/mT0KjCv07gedq71TE5OLtQgx8/PT+np6bbVN+1qM8qysrK0adMmI/UqVqyoNWvWyOFw6OzZs5o7d26xujVMy5YttWjRImOddwmJsI2/v78OHjyo6tWra8uWLWrcuLHRM0iekJeXp3bt2ik4OFje3t7avn27AgMD1bNnT0m0IL9e/v7+8vHxkdPplOm79eTn58vf319r1qzR4MGDrT9e7lbQpv706dNq27atHnjgAXl5eWn79u2qWbOm2+vdiopbR8DibvTo0VdM/0xOTjY2/ZPXadyomjdvrieffFJhYWGSpM8++0xt27b18Kjcx+4ZZePHj9fEiROt9XqNGjXS+PHjjdWzm+nOu9wnEbbZunWrZs2apXfeeUddu3bV//73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HT58WK1bt9aqVavUv39/derUydNDw1UQEgEAAAAYER8fb318/vx5uVwuOZ1OSVKZMmXUvn17zwwM18R0UwAAAABGbN68WZJ05MgRHTlyRKGhoSpRooTWr1+vGjVqEBJvUIREAAAAAEZMmjRJktSjRw8lJCSoXLlykqT09HT179/fk0PDNdDdFAAAAIBRKSkpKlu2rPW4ZMmSSk1N9dyAcE1cSQQAAABgVPPmzdWrVy+1atVKLpdLK1asUOvWrT09LPwKGtcAAAAAMG7lypXasmWLHA6HmjRpokcffdTTQ8KvICQCAAAAACysSQQAAAAAWAiJAAAAAAALIREAgD+gd+/e+vDDD63HBw8e1D333KOpU6da206dOqW6desqIyPjd9UYP3683nzzzT88VgAAioKQCADAHxASEmLdLFqS1qxZo0ceeURffPGFtW3Tpk267777VLp0aU8MEQCA60JIBADgDwgJCdG2bduUn58v6WJIfOaZZ5SZmakjR45IkjZu3KjmzZtr1apVat++vdq2basnnnhCu3btkiS9+eab6t27tyIjI/Xyyy/r3LlzGjRokMLCwtSjRw/99NNPHnt+AIBbD/dJBADgD6hWrZrKlCmj77//XnfddZcOHjyohg0bKiQkRKtXr9bf//53bdy4Ub169VLPnj01f/58ValSRRs3btRzzz2npKQkSdKxY8e0fPlyeXt769VXX5W/v7+SkpJ0+vRpdejQQffff7+HnykA4FbBlUQAAP6ggimnX375pR566CGVKFFCjzzyiNavX6+jR4/K4XBo06ZNaty4sapUqSJJatKkicqVK6fdu3dLkho2bChv74vnbjdu3Kj27dvL4XCoXLly+tvf/uax5wYAuPUQEgEA+IMKppyuXbtWzZs3l3QxBO7bt8+aapqfny+Hw1Ho37lcLuXl5UmSSpUqdcXnCnh5eZl9AgAAXIKQCADAH9SoUSPt27dPW7Zs0cMPPyxJ8vf3V506dRQXF6fQ0FA1adJE69ev188//yzp4tXCEydOqEGDBlfs7+GHH9bixYuVn5+v9PT0Qk1wAAAwjTWJAAD8QSVLltSf//xn5ebmFupgGhoaqilTpqhRo0by9fXV2LFj9fzzz8vpdMrf31/vvPPOVTueDhgwQGPHjlXr1q1Vrlw51apVy86nAwC4xTlcl85nAQAAAADc0phuCgAAAACwEBIBAAAAABZCIgAAAADAQkgEAAAAAFgIiQAAAAAACyERAAAAAGAhJAIAAAAALIREAAAAAIDl/wO/tR2A928HQAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,8))\n",
    "plot = sns.barplot(x  = df_puntaje_3_cuerpo.iloc[:30].Word, y = df_puntaje_3_cuerpo.iloc[:30].Frequency)\n",
    "for item in plot.get_xticklabels():\n",
    "    item.set_rotation(90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,8))\n",
    "plot = sns.barplot(x  = df_puntaje_4.iloc[:30].Word, y = df_puntaje_4.iloc[:30].Frequency)\n",
    "for item in plot.get_xticklabels():\n",
    "    item.set_rotation(90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Aca nos pasa lo mismo que con el puntaje 1 pero con bien, buen, Bien, buena, buen, Bueno, bueno. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,8))\n",
    "plot = sns.barplot(x  = df_puntaje_4_cuerpo.iloc[:30].Word, y = df_puntaje_4_cuerpo.iloc[:30].Frequency)\n",
    "for item in plot.get_xticklabels():\n",
    "    item.set_rotation(90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,8))\n",
    "plot = sns.barplot(x  = df_puntaje_5.iloc[:30].Word, y = df_puntaje_5.iloc[:30].Frequency)\n",
    "for item in plot.get_xticklabels():\n",
    "    item.set_rotation(90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Aca deberíamos llevar a raís a Perfecto, perfecto, Perfecta y también sacar las mayúsculas porque sino lo toma como palabras diferentes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (15,8))\n",
    "plot = sns.barplot(x  = df_puntaje_5_cuerpo.iloc[:30].Word, y = df_puntaje_5_cuerpo.iloc[:30].Frequency)\n",
    "for item in plot.get_xticklabels():\n",
    "    item.set_rotation(90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tenemos que avanzar llevando todas las palabras a minúscula y a raíz. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Stemming\n",
    "Por razones gramaticales muchas palabras pueden escribirse de manera distinta (debido a conjugación, género, número) pero tener el mismo significado para el texto. Esto es lo que nos pasó cuando graficamos la frecuencia de las palabras, debido a como estan conjugadas, la computadora puede tratarlas como palabras distintas. Pero, en términos de significado, todas estan relacionadas. Muchas veces nos va a convenir unir todas estos términos en uno solo.\n",
    "\n",
    "Una de las manera de hacer esto es por \"STEMMING\". El Stemming es un proceso eurístico que recorta la terminación de las palabras, agrupándolas por su raiz. Reduzcamos la cantidad de palabras diferentes en nuestro dataset utilizando este proceso.\n",
    "\n",
    "Vamos a importar nuevamente el dataset completo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>reviewer_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>language</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>es_0491108</td>\n",
       "      <td>product_es_0296024</td>\n",
       "      <td>reviewer_es_0999081</td>\n",
       "      <td>1</td>\n",
       "      <td>Nada bueno se me fue ka pantalla en menos de 8...</td>\n",
       "      <td>television Nevir</td>\n",
       "      <td>es</td>\n",
       "      <td>electronics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>es_0869872</td>\n",
       "      <td>product_es_0922286</td>\n",
       "      <td>reviewer_es_0216771</td>\n",
       "      <td>1</td>\n",
       "      <td>Horrible, nos tuvimos que comprar otro porque ...</td>\n",
       "      <td>Dinero tirado a la basura con esta compra</td>\n",
       "      <td>es</td>\n",
       "      <td>electronics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>es_0811721</td>\n",
       "      <td>product_es_0474543</td>\n",
       "      <td>reviewer_es_0929213</td>\n",
       "      <td>1</td>\n",
       "      <td>Te obligan a comprar dos unidades y te llega s...</td>\n",
       "      <td>solo llega una unidad cuando te obligan a comp...</td>\n",
       "      <td>es</td>\n",
       "      <td>drugstore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>es_0359921</td>\n",
       "      <td>product_es_0656090</td>\n",
       "      <td>reviewer_es_0224702</td>\n",
       "      <td>1</td>\n",
       "      <td>No entro en descalificar al vendedor, solo pue...</td>\n",
       "      <td>PRODUCTO NO RECIBIDO.</td>\n",
       "      <td>es</td>\n",
       "      <td>wireless</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>es_0068940</td>\n",
       "      <td>product_es_0662544</td>\n",
       "      <td>reviewer_es_0224827</td>\n",
       "      <td>1</td>\n",
       "      <td>Llega tarde y co la talla equivocada</td>\n",
       "      <td>Devuelto</td>\n",
       "      <td>es</td>\n",
       "      <td>shoes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    review_id          product_id          reviewer_id  stars  \\\n",
       "0  es_0491108  product_es_0296024  reviewer_es_0999081      1   \n",
       "1  es_0869872  product_es_0922286  reviewer_es_0216771      1   \n",
       "2  es_0811721  product_es_0474543  reviewer_es_0929213      1   \n",
       "3  es_0359921  product_es_0656090  reviewer_es_0224702      1   \n",
       "4  es_0068940  product_es_0662544  reviewer_es_0224827      1   \n",
       "\n",
       "                                         review_body  \\\n",
       "0  Nada bueno se me fue ka pantalla en menos de 8...   \n",
       "1  Horrible, nos tuvimos que comprar otro porque ...   \n",
       "2  Te obligan a comprar dos unidades y te llega s...   \n",
       "3  No entro en descalificar al vendedor, solo pue...   \n",
       "4               Llega tarde y co la talla equivocada   \n",
       "\n",
       "                                        review_title language product_category  \n",
       "0                                   television Nevir       es      electronics  \n",
       "1          Dinero tirado a la basura con esta compra       es      electronics  \n",
       "2  solo llega una unidad cuando te obligan a comp...       es        drugstore  \n",
       "3                              PRODUCTO NO RECIBIDO.       es         wireless  \n",
       "4                                           Devuelto       es            shoes  "
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset = pd.read_json('dataset_es_train.json', lines= True)\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Tomamos del `dataset` solo las columnas de interes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_train = dataset[[\"stars\", \"review_body\", \"review_title\", \"product_category\"]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Antes de realizar el proceso de Stemming, vamos a normalizar el texto. Le agregamos en este caso el uso de la libreria `re`, que nos permite sacar del texto todos los caracteres que no sean palabras. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importamos esta libreria que nos permite reemplzar caracteres\n",
    "import re\n",
    "\n",
    "# Importamos la función que nos permite Stemmizar de nltk y definimos el stemmer\n",
    "from nltk.stem import PorterStemmer\n",
    "stemmer = PorterStemmer()\n",
    "\n",
    "# Traemos nuevamente las stopwords\n",
    "stopwords = nltk.corpus.stopwords.words('spanish')\n",
    "#stopword.remove('no')\n",
    "#stopword.remove('not')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Recorremos todos los titulos y le vamos aplicando la Normalizacion y luega el Stemming a cada uno\n",
    "titular_list=[]\n",
    "for titular in dataset.review_title:\n",
    "    # Vamos a reemplzar los caracteres que no sean leras por espacios\n",
    "    titular=re.sub(\"[^a-zA-Z]\",\" \",str(titular))\n",
    "    # Pasamos todo a minúsculas\n",
    "    titular=titular.lower()\n",
    "    # Tokenizamos para separar las palabras del titular\n",
    "    titular=nltk.word_tokenize(titular)\n",
    "    # Eliminamos las palabras de menos de 3 letras\n",
    "    titular = [palabra for palabra in titular if len(palabra)>3]\n",
    "    # Sacamos las Stopwords\n",
    "    titular = [palabra for palabra in titular if not palabra in stopwords]\n",
    "    \n",
    "    ## Hasta acá Normalizamos, ahora a stemmizar\n",
    "    \n",
    "    # Aplicamos la funcion para buscar la raiz de las palabras\n",
    "    titular=[stemmer.stem(palabra) for palabra in titular]\n",
    "    # Por ultimo volvemos a unir el titular\n",
    "    titular=\" \".join(titular)\n",
    "    \n",
    "    # Vamos armando una lista con todos los titulares\n",
    "    titular_list.append(titular)\n",
    "    #dataset[\"titular_normalizado\"] = titular_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hacemos lo mismo con el cuerpo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Recorremos todos los cuerpos de texto y le vamos aplicando la Normalizacion y luega el Stemming a cada uno\n",
    "body_list=[]\n",
    "for body in df_train.review_body:\n",
    "    # Vamos a reemplzar los caracteres que no sean letras por espacios\n",
    "    body=re.sub(\"[^a-zA-Z]\",\" \",str(body))\n",
    "    # Pasamos todo a minúsculas\n",
    "    body=body.lower()\n",
    "    # Tokenizamos para separar las palabras del cuerpo\n",
    "    body=nltk.word_tokenize(body)\n",
    "    # Eliminamos las palabras de menos de 3 letras\n",
    "    body = [palabra for palabra in body if len(palabra)>3]\n",
    "    # Sacamos las Stopwords\n",
    "    body = [palabra for palabra in body if not palabra in stopwords]\n",
    "    \n",
    "    ## Hasta acá Normalizamos, ahora a stemmizar\n",
    "    \n",
    "    # Aplicamos la funcion para buscar la raiz de las palabras\n",
    "    body=[stemmer.stem(palabra) for palabra in body]\n",
    "    # Por ultimo volvemos a unir el titular\n",
    "    body=\" \".join(body)\n",
    "    \n",
    "    # Vamos armando una lista con todos los titulares\n",
    "    body_list.append(body)\n",
    "    #dataset[\"titular_normalizado\"] = titular_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Agregamos al dataset una columna llamado `titular_stem` que contenga los titulares stemmizados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-116-6bd76c8fbe9e>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_train[\"titular_stem\"] = titular_list\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>product_category</th>\n",
       "      <th>titular_stem</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>199995</th>\n",
       "      <td>5</td>\n",
       "      <td>Mando funciona perfectamente y cumple con toda...</td>\n",
       "      <td>Tal y como se describe</td>\n",
       "      <td>electronics</td>\n",
       "      <td>describ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199996</th>\n",
       "      <td>5</td>\n",
       "      <td>Compré la batería con cierta reticencia, pero ...</td>\n",
       "      <td>Funciona perfectamente</td>\n",
       "      <td>electronics</td>\n",
       "      <td>funciona perfectament</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199997</th>\n",
       "      <td>5</td>\n",
       "      <td>Buena calidad. Satisfecha con la compra.</td>\n",
       "      <td>Buena calidad.</td>\n",
       "      <td>apparel</td>\n",
       "      <td>buena calidad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199998</th>\n",
       "      <td>5</td>\n",
       "      <td>Perfecto para el cumple de mi hijo</td>\n",
       "      <td>Recomendado</td>\n",
       "      <td>toy</td>\n",
       "      <td>recomendado</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199999</th>\n",
       "      <td>5</td>\n",
       "      <td>Súper bien! Las brochas son buenas, no sé meno...</td>\n",
       "      <td>Preciosas</td>\n",
       "      <td>home</td>\n",
       "      <td>preciosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        stars                                        review_body  \\\n",
       "199995      5  Mando funciona perfectamente y cumple con toda...   \n",
       "199996      5  Compré la batería con cierta reticencia, pero ...   \n",
       "199997      5           Buena calidad. Satisfecha con la compra.   \n",
       "199998      5                 Perfecto para el cumple de mi hijo   \n",
       "199999      5  Súper bien! Las brochas son buenas, no sé meno...   \n",
       "\n",
       "                  review_title product_category           titular_stem  \n",
       "199995  Tal y como se describe      electronics                describ  \n",
       "199996  Funciona perfectamente      electronics  funciona perfectament  \n",
       "199997          Buena calidad.          apparel          buena calidad  \n",
       "199998             Recomendado              toy            recomendado  \n",
       "199999               Preciosas             home               preciosa  "
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train[\"titular_stem\"] = titular_list\n",
    "df_train.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-117-2ea3c6dfec53>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_train[\"body_stem\"] = body_list\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>product_category</th>\n",
       "      <th>titular_stem</th>\n",
       "      <th>body_stem</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>199995</th>\n",
       "      <td>5</td>\n",
       "      <td>Mando funciona perfectamente y cumple con toda...</td>\n",
       "      <td>Tal y como se describe</td>\n",
       "      <td>electronics</td>\n",
       "      <td>describ</td>\n",
       "      <td>mando funciona perfectament cumpl toda funcion...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199996</th>\n",
       "      <td>5</td>\n",
       "      <td>Compré la batería con cierta reticencia, pero ...</td>\n",
       "      <td>Funciona perfectamente</td>\n",
       "      <td>electronics</td>\n",
       "      <td>funciona perfectament</td>\n",
       "      <td>compr bater cierta reticencia result instalar ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199997</th>\n",
       "      <td>5</td>\n",
       "      <td>Buena calidad. Satisfecha con la compra.</td>\n",
       "      <td>Buena calidad.</td>\n",
       "      <td>apparel</td>\n",
       "      <td>buena calidad</td>\n",
       "      <td>buena calidad satisfecha compra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199998</th>\n",
       "      <td>5</td>\n",
       "      <td>Perfecto para el cumple de mi hijo</td>\n",
       "      <td>Recomendado</td>\n",
       "      <td>toy</td>\n",
       "      <td>recomendado</td>\n",
       "      <td>perfecto cumpl hijo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199999</th>\n",
       "      <td>5</td>\n",
       "      <td>Súper bien! Las brochas son buenas, no sé meno...</td>\n",
       "      <td>Preciosas</td>\n",
       "      <td>home</td>\n",
       "      <td>preciosa</td>\n",
       "      <td>bien brocha buena meno pelito quiz pesan chula...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        stars                                        review_body  \\\n",
       "199995      5  Mando funciona perfectamente y cumple con toda...   \n",
       "199996      5  Compré la batería con cierta reticencia, pero ...   \n",
       "199997      5           Buena calidad. Satisfecha con la compra.   \n",
       "199998      5                 Perfecto para el cumple de mi hijo   \n",
       "199999      5  Súper bien! Las brochas son buenas, no sé meno...   \n",
       "\n",
       "                  review_title product_category           titular_stem  \\\n",
       "199995  Tal y como se describe      electronics                describ   \n",
       "199996  Funciona perfectamente      electronics  funciona perfectament   \n",
       "199997          Buena calidad.          apparel          buena calidad   \n",
       "199998             Recomendado              toy            recomendado   \n",
       "199999               Preciosas             home               preciosa   \n",
       "\n",
       "                                                body_stem  \n",
       "199995  mando funciona perfectament cumpl toda funcion...  \n",
       "199996  compr bater cierta reticencia result instalar ...  \n",
       "199997                    buena calidad satisfecha compra  \n",
       "199998                                perfecto cumpl hijo  \n",
       "199999  bien brocha buena meno pelito quiz pesan chula...  "
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#sumamos columna de body stem\n",
    "df_train[\"body_stem\"] = body_list\n",
    "df_train.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>titular_stem</th>\n",
       "      <th>body_stem</th>\n",
       "      <th>stars</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>televis nevir</td>\n",
       "      <td>bueno pantalla meno mese recibido respuesta fa...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dinero tirado basura compra</td>\n",
       "      <td>horribl comprar sabemo ingl inform tico despu ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>solo llega unidad obligan comprar</td>\n",
       "      <td>obligan comprar unidad llega solo forma reclam...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>producto recibido</td>\n",
       "      <td>entro descalificar vendedor solo puedo decir t...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>devuelto</td>\n",
       "      <td>llega tard talla equivocada</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        titular_stem  \\\n",
       "0                      televis nevir   \n",
       "1        dinero tirado basura compra   \n",
       "2  solo llega unidad obligan comprar   \n",
       "3                  producto recibido   \n",
       "4                           devuelto   \n",
       "\n",
       "                                           body_stem  stars  \n",
       "0  bueno pantalla meno mese recibido respuesta fa...      1  \n",
       "1  horribl comprar sabemo ingl inform tico despu ...      1  \n",
       "2  obligan comprar unidad llega solo forma reclam...      1  \n",
       "3  entro descalificar vendedor solo puedo decir t...      1  \n",
       "4                        llega tard talla equivocada      1  "
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_stem=pd.concat([df_train.titular_stem, df_train.body_stem, df_train.stars],axis=1)\n",
    "dataset_stem.dropna(axis=0,inplace=True)  # Por si quedaron titulares vacios\n",
    "dataset_stem.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Aca vemos el titular stemmatizado, el cuerpo también y el puntaje"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hacemos lo mismo con el dataset dev"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>reviewer_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>language</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>es_0417480</td>\n",
       "      <td>product_es_0873923</td>\n",
       "      <td>reviewer_es_0672978</td>\n",
       "      <td>1</td>\n",
       "      <td>Malisimo, muy grande demasiado aparatoso y mal...</td>\n",
       "      <td>Mala compra</td>\n",
       "      <td>es</td>\n",
       "      <td>wireless</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>es_0180432</td>\n",
       "      <td>product_es_0713146</td>\n",
       "      <td>reviewer_es_0100858</td>\n",
       "      <td>1</td>\n",
       "      <td>No he recibido el pedido no la devolución</td>\n",
       "      <td>No lo he recibido</td>\n",
       "      <td>es</td>\n",
       "      <td>apparel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>es_0144850</td>\n",
       "      <td>product_es_0356874</td>\n",
       "      <td>reviewer_es_0486447</td>\n",
       "      <td>1</td>\n",
       "      <td>Tengo que buscar otro sistema, este no funcion...</td>\n",
       "      <td>Que no aprieta bien en el manillar</td>\n",
       "      <td>es</td>\n",
       "      <td>sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>es_0339629</td>\n",
       "      <td>product_es_0939832</td>\n",
       "      <td>reviewer_es_0894703</td>\n",
       "      <td>1</td>\n",
       "      <td>Utilicé las brocas de menor diámetro y se me d...</td>\n",
       "      <td>Brocas de mantequilla</td>\n",
       "      <td>es</td>\n",
       "      <td>home_improvement</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>es_0858362</td>\n",
       "      <td>product_es_0489066</td>\n",
       "      <td>reviewer_es_0887663</td>\n",
       "      <td>1</td>\n",
       "      <td>No me gusta su olor a viejo y aspecto malo</td>\n",
       "      <td>No me gusta</td>\n",
       "      <td>es</td>\n",
       "      <td>beauty</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    review_id          product_id          reviewer_id  stars  \\\n",
       "0  es_0417480  product_es_0873923  reviewer_es_0672978      1   \n",
       "1  es_0180432  product_es_0713146  reviewer_es_0100858      1   \n",
       "2  es_0144850  product_es_0356874  reviewer_es_0486447      1   \n",
       "3  es_0339629  product_es_0939832  reviewer_es_0894703      1   \n",
       "4  es_0858362  product_es_0489066  reviewer_es_0887663      1   \n",
       "\n",
       "                                         review_body  \\\n",
       "0  Malisimo, muy grande demasiado aparatoso y mal...   \n",
       "1          No he recibido el pedido no la devolución   \n",
       "2  Tengo que buscar otro sistema, este no funcion...   \n",
       "3  Utilicé las brocas de menor diámetro y se me d...   \n",
       "4         No me gusta su olor a viejo y aspecto malo   \n",
       "\n",
       "                         review_title language  product_category  \n",
       "0                         Mala compra       es          wireless  \n",
       "1                   No lo he recibido       es           apparel  \n",
       "2  Que no aprieta bien en el manillar       es            sports  \n",
       "3               Brocas de mantequilla       es  home_improvement  \n",
       "4                         No me gusta       es            beauty  "
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_dev = pd.read_json('dataset_es_dev.json', lines= True)\n",
    "dataset_dev.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_dev = dataset_dev[[\"stars\", \"review_body\", \"review_title\", \"product_category\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "titular_list_dev=[]\n",
    "for titular in dataset_dev.review_title:\n",
    "    # Vamos a reemplzar los caracteres que no sean leras por espacios\n",
    "    titular=re.sub(\"[^a-zA-Z]\",\" \",str(titular))\n",
    "    # Pasamos todo a minúsculas\n",
    "    titular=titular.lower()\n",
    "    # Tokenizamos para separar las palabras del titular\n",
    "    titular=nltk.word_tokenize(titular)\n",
    "    # Eliminamos las palabras de menos de 3 letras\n",
    "    titular = [palabra for palabra in titular if len(palabra)>3]\n",
    "    # Sacamos las Stopwords\n",
    "    titular = [palabra for palabra in titular if not palabra in stopwords]\n",
    "    \n",
    "    ## Hasta acá Normalizamos, ahora a stemmizar\n",
    "    \n",
    "    # Aplicamos la funcion para buscar la raiz de las palabras\n",
    "    titular=[stemmer.stem(palabra) for palabra in titular]\n",
    "    # Por ultimo volvemos a unir el titular\n",
    "    titular=\" \".join(titular)\n",
    "    \n",
    "    # Vamos armando una lista con todos los titulares\n",
    "    titular_list_dev.append(titular)\n",
    "    #dataset[\"titular_normalizado\"] = titular_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Recorremos todos los titulos y le vamos aplicando la Normalizacion y luega el Stemming a cada uno\n",
    "body_list_dev =[]\n",
    "for body in df_dev.review_body:\n",
    "    # Vamos a reemplzar los caracteres que no sean leras por espacios\n",
    "    body=re.sub(\"[^a-zA-Z]\",\" \",str(body))\n",
    "    # Pasamos todo a minúsculas\n",
    "    body=body.lower()\n",
    "    # Tokenizamos para separar las palabras del titular\n",
    "    body=nltk.word_tokenize(body)\n",
    "    # Eliminamos las palabras de menos de 3 letras\n",
    "    body = [palabra for palabra in body if len(palabra)>3]\n",
    "    # Sacamos las Stopwords\n",
    "    body = [palabra for palabra in body if not palabra in stopwords]\n",
    "    \n",
    "    ## Hasta acá Normalizamos, ahora a stemmizar\n",
    "    \n",
    "    # Aplicamos la funcion para buscar la raiz de las palabras\n",
    "    body=[stemmer.stem(palabra) for palabra in body]\n",
    "    # Por ultimo volvemos a unir el titular\n",
    "    body=\" \".join(body)\n",
    "    \n",
    "    # Vamos armando una lista con todos los titulares\n",
    "    body_list_dev.append(body)\n",
    "    #dataset[\"titular_normalizado\"] = titular_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-123-07513771b50c>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_dev[\"titular_stem\"] = titular_list_dev\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>product_category</th>\n",
       "      <th>titular_stem</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4995</th>\n",
       "      <td>5</td>\n",
       "      <td>Me ha encantado la cesta. Ha llegado impecable...</td>\n",
       "      <td>guadalupe</td>\n",
       "      <td>home</td>\n",
       "      <td>guadalup</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4996</th>\n",
       "      <td>5</td>\n",
       "      <td>Desempeña su función correctamente</td>\n",
       "      <td>calidad precio</td>\n",
       "      <td>camera</td>\n",
       "      <td>calidad precio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4997</th>\n",
       "      <td>5</td>\n",
       "      <td>Me ha encantado la diadema! Las flores son tal...</td>\n",
       "      <td>Excelente</td>\n",
       "      <td>toy</td>\n",
       "      <td>excelent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4998</th>\n",
       "      <td>5</td>\n",
       "      <td>A mi me gustan mucho las fundas TPU, ya que so...</td>\n",
       "      <td>Genial</td>\n",
       "      <td>wireless</td>\n",
       "      <td>genial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4999</th>\n",
       "      <td>5</td>\n",
       "      <td>El artículo ha cumplido con las expectativas q...</td>\n",
       "      <td>Buena calidad</td>\n",
       "      <td>apparel</td>\n",
       "      <td>buena calidad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      stars                                        review_body  \\\n",
       "4995      5  Me ha encantado la cesta. Ha llegado impecable...   \n",
       "4996      5                 Desempeña su función correctamente   \n",
       "4997      5  Me ha encantado la diadema! Las flores son tal...   \n",
       "4998      5  A mi me gustan mucho las fundas TPU, ya que so...   \n",
       "4999      5  El artículo ha cumplido con las expectativas q...   \n",
       "\n",
       "        review_title product_category    titular_stem  \n",
       "4995       guadalupe             home        guadalup  \n",
       "4996  calidad precio           camera  calidad precio  \n",
       "4997       Excelente              toy        excelent  \n",
       "4998          Genial         wireless          genial  \n",
       "4999   Buena calidad          apparel   buena calidad  "
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dev[\"titular_stem\"] = titular_list_dev\n",
    "df_dev.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-124-bb034d2c17bf>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_dev[\"body_stem\"] = body_list_dev\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>product_category</th>\n",
       "      <th>titular_stem</th>\n",
       "      <th>body_stem</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4995</th>\n",
       "      <td>5</td>\n",
       "      <td>Me ha encantado la cesta. Ha llegado impecable...</td>\n",
       "      <td>guadalupe</td>\n",
       "      <td>home</td>\n",
       "      <td>guadalup</td>\n",
       "      <td>encantado cesta llegado impec tama util pesa f...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4996</th>\n",
       "      <td>5</td>\n",
       "      <td>Desempeña su función correctamente</td>\n",
       "      <td>calidad precio</td>\n",
       "      <td>camera</td>\n",
       "      <td>calidad precio</td>\n",
       "      <td>desemp funci correctament</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4997</th>\n",
       "      <td>5</td>\n",
       "      <td>Me ha encantado la diadema! Las flores son tal...</td>\n",
       "      <td>Excelente</td>\n",
       "      <td>toy</td>\n",
       "      <td>excelent</td>\n",
       "      <td>encantado diadema flore vienen imagen aplastad...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4998</th>\n",
       "      <td>5</td>\n",
       "      <td>A mi me gustan mucho las fundas TPU, ya que so...</td>\n",
       "      <td>Genial</td>\n",
       "      <td>wireless</td>\n",
       "      <td>genial</td>\n",
       "      <td>gustan funda funda normalment fina colorida ha...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4999</th>\n",
       "      <td>5</td>\n",
       "      <td>El artículo ha cumplido con las expectativas q...</td>\n",
       "      <td>Buena calidad</td>\n",
       "      <td>apparel</td>\n",
       "      <td>buena calidad</td>\n",
       "      <td>culo cumplido expectativa deseaba</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      stars                                        review_body  \\\n",
       "4995      5  Me ha encantado la cesta. Ha llegado impecable...   \n",
       "4996      5                 Desempeña su función correctamente   \n",
       "4997      5  Me ha encantado la diadema! Las flores son tal...   \n",
       "4998      5  A mi me gustan mucho las fundas TPU, ya que so...   \n",
       "4999      5  El artículo ha cumplido con las expectativas q...   \n",
       "\n",
       "        review_title product_category    titular_stem  \\\n",
       "4995       guadalupe             home        guadalup   \n",
       "4996  calidad precio           camera  calidad precio   \n",
       "4997       Excelente              toy        excelent   \n",
       "4998          Genial         wireless          genial   \n",
       "4999   Buena calidad          apparel   buena calidad   \n",
       "\n",
       "                                              body_stem  \n",
       "4995  encantado cesta llegado impec tama util pesa f...  \n",
       "4996                          desemp funci correctament  \n",
       "4997  encantado diadema flore vienen imagen aplastad...  \n",
       "4998  gustan funda funda normalment fina colorida ha...  \n",
       "4999                  culo cumplido expectativa deseaba  "
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#sumamos columna de body stem\n",
    "df_dev[\"body_stem\"] = body_list_dev\n",
    "df_dev.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>titular_stem</th>\n",
       "      <th>body_stem</th>\n",
       "      <th>stars</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>mala compra</td>\n",
       "      <td>malisimo grand demasiado aparatoso protector p...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>recibido</td>\n",
       "      <td>recibido pedido devoluci</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>aprieta bien manillar</td>\n",
       "      <td>buscar sistema funciona bien abrazadera lleva ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>broca mantequilla</td>\n",
       "      <td>util broca menor metro doblaron varia mantequi...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>gusta</td>\n",
       "      <td>gusta olor viejo aspecto malo</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            titular_stem                                          body_stem  \\\n",
       "0            mala compra  malisimo grand demasiado aparatoso protector p...   \n",
       "1               recibido                           recibido pedido devoluci   \n",
       "2  aprieta bien manillar  buscar sistema funciona bien abrazadera lleva ...   \n",
       "3      broca mantequilla  util broca menor metro doblaron varia mantequi...   \n",
       "4                  gusta                      gusta olor viejo aspecto malo   \n",
       "\n",
       "   stars  \n",
       "0      1  \n",
       "1      1  \n",
       "2      1  \n",
       "3      1  \n",
       "4      1  "
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_stem_dev=pd.concat([df_dev.titular_stem, df_dev.body_stem, df_dev.stars],axis=1)\n",
    "dataset_stem_dev.dropna(axis=0,inplace=True)  # Por si quedaron titulares vacios\n",
    "dataset_stem_dev.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "También lo hacemos con el dataset test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>reviewer_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>language</th>\n",
       "      <th>product_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>es_0038754</td>\n",
       "      <td>product_es_0113523</td>\n",
       "      <td>reviewer_es_0580071</td>\n",
       "      <td>1</td>\n",
       "      <td>no me llego el articulo me lo mando por correo...</td>\n",
       "      <td>no me llego</td>\n",
       "      <td>es</td>\n",
       "      <td>wireless</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>es_0748979</td>\n",
       "      <td>product_es_0017036</td>\n",
       "      <td>reviewer_es_0819733</td>\n",
       "      <td>1</td>\n",
       "      <td>la mensajería horrible, no compro mas</td>\n",
       "      <td>amazon sigue sin cumplir en las entregas</td>\n",
       "      <td>es</td>\n",
       "      <td>home</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>es_0411746</td>\n",
       "      <td>product_es_0138642</td>\n",
       "      <td>reviewer_es_0508607</td>\n",
       "      <td>1</td>\n",
       "      <td>Estoy muy decepcionado con el vendedor ya que ...</td>\n",
       "      <td>ESTAFA EN EL ENVÍO</td>\n",
       "      <td>es</td>\n",
       "      <td>toy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>es_0786686</td>\n",
       "      <td>product_es_0170887</td>\n",
       "      <td>reviewer_es_0491157</td>\n",
       "      <td>1</td>\n",
       "      <td>Mi valoración no es sobre el producto sino sob...</td>\n",
       "      <td>Estafa de Amazon</td>\n",
       "      <td>es</td>\n",
       "      <td>home</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>es_0429700</td>\n",
       "      <td>product_es_0710642</td>\n",
       "      <td>reviewer_es_0008745</td>\n",
       "      <td>1</td>\n",
       "      <td>Pues tenía interés en este libro y probé la ve...</td>\n",
       "      <td>No conseguí pasar de la portada en Kindle</td>\n",
       "      <td>es</td>\n",
       "      <td>digital_ebook_purchase</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    review_id          product_id          reviewer_id  stars  \\\n",
       "0  es_0038754  product_es_0113523  reviewer_es_0580071      1   \n",
       "1  es_0748979  product_es_0017036  reviewer_es_0819733      1   \n",
       "2  es_0411746  product_es_0138642  reviewer_es_0508607      1   \n",
       "3  es_0786686  product_es_0170887  reviewer_es_0491157      1   \n",
       "4  es_0429700  product_es_0710642  reviewer_es_0008745      1   \n",
       "\n",
       "                                         review_body  \\\n",
       "0  no me llego el articulo me lo mando por correo...   \n",
       "1              la mensajería horrible, no compro mas   \n",
       "2  Estoy muy decepcionado con el vendedor ya que ...   \n",
       "3  Mi valoración no es sobre el producto sino sob...   \n",
       "4  Pues tenía interés en este libro y probé la ve...   \n",
       "\n",
       "                                review_title language        product_category  \n",
       "0                                no me llego       es                wireless  \n",
       "1   amazon sigue sin cumplir en las entregas       es                    home  \n",
       "2                         ESTAFA EN EL ENVÍO       es                     toy  \n",
       "3                           Estafa de Amazon       es                    home  \n",
       "4  No conseguí pasar de la portada en Kindle       es  digital_ebook_purchase  "
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_test = pd.read_json('dataset_es_test.json', lines= True)\n",
    "dataset_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_test = dataset_test[[\"stars\", \"review_body\", \"review_title\", \"product_category\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "titular_list_test=[]\n",
    "for titular in dataset_test.review_title:\n",
    "    # Vamos a reemplzar los caracteres que no sean leras por espacios\n",
    "    titular=re.sub(\"[^a-zA-Z]\",\" \",str(titular))\n",
    "    # Pasamos todo a minúsculas\n",
    "    titular=titular.lower()\n",
    "    # Tokenizamos para separar las palabras del titular\n",
    "    titular=nltk.word_tokenize(titular)\n",
    "    # Eliminamos las palabras de menos de 3 letras\n",
    "    titular = [palabra for palabra in titular if len(palabra)>3]\n",
    "    # Sacamos las Stopwords\n",
    "    titular = [palabra for palabra in titular if not palabra in stopwords]\n",
    "    \n",
    "    ## Hasta acá Normalizamos, ahora a stemmizar\n",
    "    \n",
    "    # Aplicamos la funcion para buscar la raiz de las palabras\n",
    "    titular=[stemmer.stem(palabra) for palabra in titular]\n",
    "    # Por ultimo volvemos a unir el titular\n",
    "    titular=\" \".join(titular)\n",
    "    \n",
    "    # Vamos armando una lista con todos los titulares\n",
    "    titular_list_test.append(titular)\n",
    "    #dataset[\"titular_normalizado\"] = titular_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "body_list_test =[]\n",
    "for body in df_test.review_body:\n",
    "    # Vamos a reemplzar los caracteres que no sean leras por espacios\n",
    "    body=re.sub(\"[^a-zA-Z]\",\" \",str(body))\n",
    "    # Pasamos todo a minúsculas\n",
    "    body=body.lower()\n",
    "    # Tokenizamos para separar las palabras del titular\n",
    "    body=nltk.word_tokenize(body)\n",
    "    # Eliminamos las palabras de menos de 3 letras\n",
    "    body = [palabra for palabra in body if len(palabra)>3]\n",
    "    # Sacamos las Stopwords\n",
    "    body = [palabra for palabra in body if not palabra in stopwords]\n",
    "    \n",
    "    ## Hasta acá Normalizamos, ahora a stemmizar\n",
    "    \n",
    "    # Aplicamos la funcion para buscar la raiz de las palabras\n",
    "    body=[stemmer.stem(palabra) for palabra in body]\n",
    "    # Por ultimo volvemos a unir el titular\n",
    "    body=\" \".join(body)\n",
    "    \n",
    "    # Vamos armando una lista con todos los titulares\n",
    "    body_list_test.append(body)\n",
    "    #dataset[\"titular_normalizado\"] = titular_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-130-b8069ff88cba>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_test[\"titular_stem\"] = titular_list_test\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>product_category</th>\n",
       "      <th>titular_stem</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4995</th>\n",
       "      <td>5</td>\n",
       "      <td>Para lo que cuesta es perfecto porque cumple s...</td>\n",
       "      <td>Perfectos para lo que sirven</td>\n",
       "      <td>wireless</td>\n",
       "      <td>perfecto sirven</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4996</th>\n",
       "      <td>5</td>\n",
       "      <td>Material muy flexible y cómodo, acorde a la de...</td>\n",
       "      <td>Buen vendedor, rápido y fiable.</td>\n",
       "      <td>wireless</td>\n",
       "      <td>buen vendedor pido fiabl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4997</th>\n",
       "      <td>5</td>\n",
       "      <td>Se ve bien el grabado</td>\n",
       "      <td>medallas con bonito grabado</td>\n",
       "      <td>home</td>\n",
       "      <td>medalla bonito grabado</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4998</th>\n",
       "      <td>5</td>\n",
       "      <td>lo compré para mi bici pero finalmente se lo h...</td>\n",
       "      <td>timbre</td>\n",
       "      <td>sports</td>\n",
       "      <td>timbr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4999</th>\n",
       "      <td>5</td>\n",
       "      <td>Pues este tipo de cascos si que son inalambric...</td>\n",
       "      <td>Auriculares sin cables de verdad</td>\n",
       "      <td>electronics</td>\n",
       "      <td>auricular cabl verdad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      stars                                        review_body  \\\n",
       "4995      5  Para lo que cuesta es perfecto porque cumple s...   \n",
       "4996      5  Material muy flexible y cómodo, acorde a la de...   \n",
       "4997      5                              Se ve bien el grabado   \n",
       "4998      5  lo compré para mi bici pero finalmente se lo h...   \n",
       "4999      5  Pues este tipo de cascos si que son inalambric...   \n",
       "\n",
       "                          review_title product_category  \\\n",
       "4995      Perfectos para lo que sirven         wireless   \n",
       "4996   Buen vendedor, rápido y fiable.         wireless   \n",
       "4997       medallas con bonito grabado             home   \n",
       "4998                            timbre           sports   \n",
       "4999  Auriculares sin cables de verdad      electronics   \n",
       "\n",
       "                  titular_stem  \n",
       "4995           perfecto sirven  \n",
       "4996  buen vendedor pido fiabl  \n",
       "4997    medalla bonito grabado  \n",
       "4998                     timbr  \n",
       "4999     auricular cabl verdad  "
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test[\"titular_stem\"] = titular_list_test\n",
    "df_test.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-131-6e8ddbf1dc3b>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_test[\"body_stem\"] = body_list_test\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>review_body</th>\n",
       "      <th>review_title</th>\n",
       "      <th>product_category</th>\n",
       "      <th>titular_stem</th>\n",
       "      <th>body_stem</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4995</th>\n",
       "      <td>5</td>\n",
       "      <td>Para lo que cuesta es perfecto porque cumple s...</td>\n",
       "      <td>Perfectos para lo que sirven</td>\n",
       "      <td>wireless</td>\n",
       "      <td>perfecto sirven</td>\n",
       "      <td>cuesta perfecto cumpl funci sobra adem pequ ca...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4996</th>\n",
       "      <td>5</td>\n",
       "      <td>Material muy flexible y cómodo, acorde a la de...</td>\n",
       "      <td>Buen vendedor, rápido y fiable.</td>\n",
       "      <td>wireless</td>\n",
       "      <td>buen vendedor pido fiabl</td>\n",
       "      <td>materi flexibl modo acord descripci</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4997</th>\n",
       "      <td>5</td>\n",
       "      <td>Se ve bien el grabado</td>\n",
       "      <td>medallas con bonito grabado</td>\n",
       "      <td>home</td>\n",
       "      <td>medalla bonito grabado</td>\n",
       "      <td>bien grabado</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4998</th>\n",
       "      <td>5</td>\n",
       "      <td>lo compré para mi bici pero finalmente se lo h...</td>\n",
       "      <td>timbre</td>\n",
       "      <td>sports</td>\n",
       "      <td>timbr</td>\n",
       "      <td>compr bici finalment quedado xiaomi scooter pi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4999</th>\n",
       "      <td>5</td>\n",
       "      <td>Pues este tipo de cascos si que son inalambric...</td>\n",
       "      <td>Auriculares sin cables de verdad</td>\n",
       "      <td>electronics</td>\n",
       "      <td>auricular cabl verdad</td>\n",
       "      <td>pue tipo casco inalambrico verdad atado goma t...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      stars                                        review_body  \\\n",
       "4995      5  Para lo que cuesta es perfecto porque cumple s...   \n",
       "4996      5  Material muy flexible y cómodo, acorde a la de...   \n",
       "4997      5                              Se ve bien el grabado   \n",
       "4998      5  lo compré para mi bici pero finalmente se lo h...   \n",
       "4999      5  Pues este tipo de cascos si que son inalambric...   \n",
       "\n",
       "                          review_title product_category  \\\n",
       "4995      Perfectos para lo que sirven         wireless   \n",
       "4996   Buen vendedor, rápido y fiable.         wireless   \n",
       "4997       medallas con bonito grabado             home   \n",
       "4998                            timbre           sports   \n",
       "4999  Auriculares sin cables de verdad      electronics   \n",
       "\n",
       "                  titular_stem  \\\n",
       "4995           perfecto sirven   \n",
       "4996  buen vendedor pido fiabl   \n",
       "4997    medalla bonito grabado   \n",
       "4998                     timbr   \n",
       "4999     auricular cabl verdad   \n",
       "\n",
       "                                              body_stem  \n",
       "4995  cuesta perfecto cumpl funci sobra adem pequ ca...  \n",
       "4996                materi flexibl modo acord descripci  \n",
       "4997                                       bien grabado  \n",
       "4998  compr bici finalment quedado xiaomi scooter pi...  \n",
       "4999  pue tipo casco inalambrico verdad atado goma t...  "
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#sumamos columna de body stem\n",
    "df_test[\"body_stem\"] = body_list_test\n",
    "df_test.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>titular_stem</th>\n",
       "      <th>body_stem</th>\n",
       "      <th>stars</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>llego</td>\n",
       "      <td>llego articulo mando correo normal seguimiento...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>amazon sigu cumplir entrega</td>\n",
       "      <td>mensaj horribl compro</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>estafa</td>\n",
       "      <td>decepcionado vendedor pedido lleg tiempo cumpl...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>estafa amazon</td>\n",
       "      <td>valoraci producto sino amazon ofrec producto t...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>consegu pasar portada kindl</td>\n",
       "      <td>pue inter libro prob versi kindl abr portada p...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  titular_stem  \\\n",
       "0                        llego   \n",
       "1  amazon sigu cumplir entrega   \n",
       "2                       estafa   \n",
       "3                estafa amazon   \n",
       "4  consegu pasar portada kindl   \n",
       "\n",
       "                                           body_stem  stars  \n",
       "0  llego articulo mando correo normal seguimiento...      1  \n",
       "1                              mensaj horribl compro      1  \n",
       "2  decepcionado vendedor pedido lleg tiempo cumpl...      1  \n",
       "3  valoraci producto sino amazon ofrec producto t...      1  \n",
       "4  pue inter libro prob versi kindl abr portada p...      1  "
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_stem_test=pd.concat([df_test.titular_stem, df_test.body_stem, df_test.stars],axis=1)\n",
    "dataset_stem_test.dropna(axis=0,inplace=True)  # Por si quedaron titulares vacios\n",
    "dataset_stem_test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Lemmatization\n",
    "\n",
    "Otra manera de llevar distintas palabras a un raíz común en la que comparten un significado es mediante el procezo de 'Lemmatizar' el texto. Es similar al 'Stemming' pero un poco más educado, ya que intenta realizar el proceso teniendo en cuenta cuál es el rol que la palabra cumple en el texto. Esto quiere decir que su accionar será distinto si la palabra a lemmantizar está actuando como verbo, sustantivo, etc. \n",
    "\n",
    "Para usar las funciones que ofrece `nltk` para lemmantizar, tendremos primero que descargar la libreria `Wordnet` que se encuentra en la solapa 'corpora' y las librerias 'maxent_treebank_pos_' y 'averaged_perceptron_tagger' que se encuentra en la solapa 'Models'. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "#nltk.download() #una vez que ejecutamos no hace falta volver a hacerlo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importamos esta libreria que nos permite reemplzar caracteres\n",
    "import re\n",
    "\n",
    "# Importamos el lemmatizar de NLTK, y creamos el objeto\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "wordnet_lemmatizer = WordNetLemmatizer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Veamos cómo actúa el lemmatizer sobre una frase de ejemplo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Word                Lemma               \n",
      "he                  he                  \n",
      "was                 wa                  \n",
      "running             running             \n",
      "and                 and                 \n",
      "eating              eating              \n",
      "at                  at                  \n",
      "same                same                \n",
      "time                time                \n",
      "he                  he                  \n",
      "has                 ha                  \n",
      "bad                 bad                 \n",
      "habit               habit               \n",
      "of                  of                  \n",
      "swimming            swimming            \n",
      "after               after               \n",
      "playing             playing             \n",
      "long                long                \n",
      "hours               hour                \n",
      "in                  in                  \n",
      "the                 the                 \n",
      "sun                 sun                 \n"
     ]
    }
   ],
   "source": [
    "# Oracion que usaremos como ejemplo\n",
    "frase = \"He was running and eating at same time. He has bad habit of swimming after playing long hours in the Sun.\"\n",
    "\n",
    "# Hay que regularizar el texto. Dejar solo letra, pasar a minúsculas y tokenizar:\n",
    "\n",
    "# Sacamos todo lo que no sean letras\n",
    "frase = re.sub(\"[^a-zA-Z]\",\" \",str(frase))\n",
    "# Pasamos a minúsculas\n",
    "frase = frase.lower()\n",
    "# Tokenizamos\n",
    "frase_tokens = nltk.word_tokenize(frase)\n",
    "\n",
    "# Veamos como cambians las palabras al lemmatizar\n",
    "print(\"{0:20}{1:20}\".format(\"Word\",\"Lemma\"))\n",
    "for palabra in frase_tokens:\n",
    "    print (\"{0:20}{1:20}\".format(palabra,wordnet_lemmatizer.lemmatize(palabra)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('he', 'PRP'), ('was', 'VBD'), ('running', 'VBG'), ('and', 'CC'), ('eating', 'VBG'), ('at', 'IN'), ('same', 'JJ'), ('time', 'NN'), ('he', 'PRP'), ('has', 'VBZ'), ('bad', 'JJ'), ('habit', 'NN'), ('of', 'IN'), ('swimming', 'NN'), ('after', 'IN'), ('playing', 'VBG'), ('long', 'JJ'), ('hours', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('sun', 'NN')]\n"
     ]
    }
   ],
   "source": [
    "print(nltk.pos_tag(frase_tokens))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.corpus import wordnet\n",
    "\n",
    "def get_wordnet_pos(word):\n",
    "    \"\"\"Map POS tag to first character lemmatize() accepts\"\"\"\n",
    "    tag = nltk.pos_tag([word])[0][1][0].upper()\n",
    "    tag_dict = {\"J\": wordnet.ADJ,\n",
    "                \"N\": wordnet.NOUN,\n",
    "                \"V\": wordnet.VERB,\n",
    "                \"R\": wordnet.ADV}\n",
    "\n",
    "    return tag_dict.get(tag, wordnet.NOUN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Palabra:            Tipo:               Lemma:              \n",
      "he                  n                   he                  \n",
      "was                 v                   be                  \n",
      "running             v                   run                 \n",
      "and                 n                   and                 \n",
      "eating              v                   eat                 \n",
      "at                  n                   at                  \n",
      "same                a                   same                \n",
      "time                n                   time                \n",
      "he                  n                   he                  \n",
      "has                 v                   have                \n",
      "bad                 a                   bad                 \n",
      "habit               n                   habit               \n",
      "of                  n                   of                  \n",
      "swimming            v                   swim                \n",
      "after               n                   after               \n",
      "playing             v                   play                \n",
      "long                r                   long                \n",
      "hours               n                   hour                \n",
      "in                  n                   in                  \n",
      "the                 n                   the                 \n",
      "sun                 n                   sun                 \n"
     ]
    }
   ],
   "source": [
    "frase_lemma = [wordnet_lemmatizer.lemmatize(w, get_wordnet_pos(w)) for w in nltk.word_tokenize(frase)]\n",
    "tipo_palabra = [get_wordnet_pos(w) for w in nltk.word_tokenize(frase)]\n",
    "\n",
    "# Veamos como cambiaron las palabras\n",
    "print(\"{0:20}{1:20}{2:20}\".format(\"Palabra:\",\"Tipo:\",\"Lemma:\"))\n",
    "for i in range(len(frase_tokens)):\n",
    "    print (\"{0:20}{1:20}{2:20}\".format(frase_tokens[i],tipo_palabra[i],frase_lemma[i]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora si vemos que tiene sentido"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importamos el lemmatizar de NLTK, y creamos el objeto\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "wordnet_lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "# Importamos esta libreria que nos permite reemplzar caracteres\n",
    "import re\n",
    "\n",
    "dataset = pd.read_json('dataset_es_train.json', lines= True)\n",
    "dataset = pd.concat([dataset.review_title, dataset.review_body, dataset.stars],axis=1)\n",
    "dataset.dropna(axis=0,inplace=True)\n",
    "\n",
    "# Traemos nuevamente las stopwords\n",
    "stopwords = nltk.corpus.stopwords.words('spanish')\n",
    "#stopword.remove('no')\n",
    "#stopword.remove('not')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "titular_list=[]\n",
    "for titular in dataset.review_title: \n",
    "    # Vamos a reemplzar los caracteres que no sean letras por espacios\n",
    "    titular=re.sub(\"[^a-zA-Z]\",\" \",str(titular))\n",
    "    # Pasamos todo a minúsculas\n",
    "    titular=titular.lower()\n",
    "    # Tokenizamos para separar las palabras\n",
    "    titular=nltk.word_tokenize(titular)\n",
    "    \n",
    "    # Aplicamos el Lemmatizer (Esto puede tardar un ratito)\n",
    "    frase_lemma = [wordnet_lemmatizer.lemmatize(w, get_wordnet_pos(w)) for w in titular]\n",
    "    \n",
    "    \n",
    "    # Eliminamos las palabras d emenos de 3 letras\n",
    "    titular = [palabra for palabra in titular if len(palabra)>3]\n",
    "    # Sacamos las Stopwords\n",
    "    titular = [palabra for palabra in titular if not palabra in stopwords]\n",
    "    \n",
    "    # Por ultimo volvemos a unir el titular\n",
    "    titular=\" \".join(titular)\n",
    "    #dataset[\"titular_normalizado\"] = titular_list\n",
    "    titular_list.append(titular)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "body_list=[]\n",
    "for body in dataset.review_body: #ahora con review body\n",
    "    # Vamos a reemplzar los caracteres que no sean leras por espacios\n",
    "    body=re.sub(\"[^a-zA-Z]\",\" \",str(titular))\n",
    "    # Pasamos todo a minúsculas\n",
    "    body=body.lower()\n",
    "    # Tokenizamos para separar las palabras\n",
    "    body=nltk.word_tokenize(body)\n",
    "    \n",
    "    # Aplicamos el Lemmatizer (Esto puede tardar un ratito)\n",
    "    frase_lemma = [wordnet_lemmatizer.lemmatize(w, get_wordnet_pos(w)) for w in body]\n",
    "    \n",
    "    \n",
    "    # Eliminamos las palabras d emenos de 3 letras\n",
    "    body = [palabra for palabra in body if len(palabra)>3]\n",
    "    # Sacamos las Stopwords\n",
    "    body = [palabra for palabra in body if not palabra in stopwords]\n",
    "    \n",
    "    # Por ultimo volvemos a unir el titular\n",
    "    body=\" \".join(body)\n",
    "    dataset[\"titular_normalizado\"] = titular_list\n",
    "    body_list.append(body)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_title</th>\n",
       "      <th>review_body</th>\n",
       "      <th>stars</th>\n",
       "      <th>titular_lemm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>199995</th>\n",
       "      <td>Tal y como se describe</td>\n",
       "      <td>Mando funciona perfectamente y cumple con toda...</td>\n",
       "      <td>5</td>\n",
       "      <td>describe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199996</th>\n",
       "      <td>Funciona perfectamente</td>\n",
       "      <td>Compré la batería con cierta reticencia, pero ...</td>\n",
       "      <td>5</td>\n",
       "      <td>funciona perfectamente</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199997</th>\n",
       "      <td>Buena calidad.</td>\n",
       "      <td>Buena calidad. Satisfecha con la compra.</td>\n",
       "      <td>5</td>\n",
       "      <td>buena calidad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199998</th>\n",
       "      <td>Recomendado</td>\n",
       "      <td>Perfecto para el cumple de mi hijo</td>\n",
       "      <td>5</td>\n",
       "      <td>recomendado</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199999</th>\n",
       "      <td>Preciosas</td>\n",
       "      <td>Súper bien! Las brochas son buenas, no sé meno...</td>\n",
       "      <td>5</td>\n",
       "      <td>preciosas</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  review_title  \\\n",
       "199995  Tal y como se describe   \n",
       "199996  Funciona perfectamente   \n",
       "199997          Buena calidad.   \n",
       "199998             Recomendado   \n",
       "199999               Preciosas   \n",
       "\n",
       "                                              review_body  stars  \\\n",
       "199995  Mando funciona perfectamente y cumple con toda...      5   \n",
       "199996  Compré la batería con cierta reticencia, pero ...      5   \n",
       "199997           Buena calidad. Satisfecha con la compra.      5   \n",
       "199998                 Perfecto para el cumple de mi hijo      5   \n",
       "199999  Súper bien! Las brochas son buenas, no sé meno...      5   \n",
       "\n",
       "                  titular_lemm  \n",
       "199995                describe  \n",
       "199996  funciona perfectamente  \n",
       "199997           buena calidad  \n",
       "199998             recomendado  \n",
       "199999               preciosas  "
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset[\"titular_lemm\"] = titular_list\n",
    "dataset.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_title</th>\n",
       "      <th>review_body</th>\n",
       "      <th>stars</th>\n",
       "      <th>body_lemm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>199995</th>\n",
       "      <td>Tal y como se describe</td>\n",
       "      <td>Mando funciona perfectamente y cumple con toda...</td>\n",
       "      <td>5</td>\n",
       "      <td>mando funciona perfectament cumpl toda funcion...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199996</th>\n",
       "      <td>Funciona perfectamente</td>\n",
       "      <td>Compré la batería con cierta reticencia, pero ...</td>\n",
       "      <td>5</td>\n",
       "      <td>compr bater cierta reticencia result instalar ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199997</th>\n",
       "      <td>Buena calidad.</td>\n",
       "      <td>Buena calidad. Satisfecha con la compra.</td>\n",
       "      <td>5</td>\n",
       "      <td>buena calidad satisfecha compra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199998</th>\n",
       "      <td>Recomendado</td>\n",
       "      <td>Perfecto para el cumple de mi hijo</td>\n",
       "      <td>5</td>\n",
       "      <td>perfecto cumpl hijo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199999</th>\n",
       "      <td>Preciosas</td>\n",
       "      <td>Súper bien! Las brochas son buenas, no sé meno...</td>\n",
       "      <td>5</td>\n",
       "      <td>bien brocha buena meno pelito quiz pesan chula...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  review_title  \\\n",
       "199995  Tal y como se describe   \n",
       "199996  Funciona perfectamente   \n",
       "199997          Buena calidad.   \n",
       "199998             Recomendado   \n",
       "199999               Preciosas   \n",
       "\n",
       "                                              review_body  stars  \\\n",
       "199995  Mando funciona perfectamente y cumple con toda...      5   \n",
       "199996  Compré la batería con cierta reticencia, pero ...      5   \n",
       "199997           Buena calidad. Satisfecha con la compra.      5   \n",
       "199998                 Perfecto para el cumple de mi hijo      5   \n",
       "199999  Súper bien! Las brochas son buenas, no sé meno...      5   \n",
       "\n",
       "                                                body_lemm  \n",
       "199995  mando funciona perfectament cumpl toda funcion...  \n",
       "199996  compr bater cierta reticencia result instalar ...  \n",
       "199997                    buena calidad satisfecha compra  \n",
       "199998                                perfecto cumpl hijo  \n",
       "199999  bien brocha buena meno pelito quiz pesan chula...  "
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset[\"body_lemm\"] = body_list\n",
    "dataset.tail() #ver si lo de arriba funciona"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>titular_lemm</th>\n",
       "      <th>stars</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>television nevir</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dinero tirado basura compra</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>solo llega unidad obligan comprar</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>producto recibido</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>devuelto</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        titular_lemm  stars\n",
       "0                   television nevir      1\n",
       "1        dinero tirado basura compra      1\n",
       "2  solo llega unidad obligan comprar      1\n",
       "3                  producto recibido      1\n",
       "4                           devuelto      1"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_lemm = pd.concat([dataset.titular_lemm, dataset.stars],axis=1)\n",
    "dataset_lemm.dropna(axis=0,inplace=True)  # Por si quedaron titulares vacios\n",
    "dataset_lemm.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dataset_lemm = pd.concat([dataset.body_lemm, dataset.stars],axis=1)\n",
    "#dataset_lemm.dropna(axis=0,inplace=True)  # Por si quedaron titulares vacios\n",
    "#dataset_lemm.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Vectorizar\n",
    "\n",
    "Hasta ahora, tenemos un grupo de palabras por cada titular (bag of words), ya sea *lemmatizado* o *stemmizado*. La idea ahora es representar esta lista de palabras como un vector. Para esto vamos a utilizar la función `CountVectorizer` de Scikit-Learn. Esta función nos permite representar cada título por un vector con un `1` en las palabras que contiene y un `0` en las que no. Además, vamos a trabajar únicamente con las palabras que aparecen más veces en el texto, ya que las que aparecen una única vez o pocas veces no nos van a brindar información que se pueda generalizar.\n",
    "Cuando vectorizamos llevamos los texto a numeros mediante un vector, ese vector va a contribuir los aributos dee nuestro modelo.\n",
    "\n",
    "Avanzamos tomando la lista de palabras y el vector que nos dice el puntaje del título"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tomamso la lista de palabras y el vector que nos dice el puntaje del titulo\n",
    "titular_list = list(dataset_lemm['titular_lemm'].values)\n",
    "stars = dataset_lemm['stars'].values\n",
    "\n",
    "## Para probar con Stemmizer:\n",
    "#list_titulos = list(dataset_stem'titular_stem'].values)\n",
    "#is_sarc = dataset_stem['is_sarcastic'].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Avanzamos con el título así ejecuta más rápido y también consideramos que es un resumen de lo que dice el cuerpo del texto."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Preparamos el conversor de bag of words a vectores que traemos de sklearn. `CountVectorizer` posee varias funcionalidades que pueden determinarse a partir de parámetros. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "# Usaremos solo las 1000 palabras con mas frecuencia en todo el corpus para generar los vectores\n",
    "max_features=1000\n",
    "\n",
    "# Es decir que cada instancia tendrá 1000 features\n",
    "cou_vec=CountVectorizer(max_features=max_features) # stop_words=\"spanish\" , ngram_range=(1, 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notemos que desde `CountVectorizer` se pueden quitar las stopwords (algo que ya hicimos con `nltk`) e incluir los n_gramas automáticamente.\n",
    "\n",
    "Ahora sí, vamos generarnos los vectores para cada título a partir del corpus total."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50 palabras mas usadas:  ['abierta', 'abierto', 'aburrido', 'acaba', 'acabado', 'acabados', 'accesorio', 'accesorios', 'aceite', 'aceptable', 'aceptables', 'acierto', 'aconsejable', 'aconsejo', 'acorde', 'adapta', 'adaptador', 'adecuada', 'adecuado', 'adhesivo', 'agarre', 'agradable', 'agua', 'aguanta', 'ahora', 'aire', 'ajusta', 'ajustado', 'ajustan', 'ajuste', 'alta', 'altavoz', 'alto', 'altura', 'amazon', 'antena', 'antonio', 'anuncia', 'anunciado', 'anuncian', 'anuncio', 'apaga', 'aparato', 'aparece', 'apariencia', 'apenas', 'apple', 'aprender', 'apto', 'armario']\n"
     ]
    }
   ],
   "source": [
    "matriz_titulos = cou_vec.fit_transform(titular_list)\n",
    "\n",
    "# Tomamos las palabras\n",
    "all_words = cou_vec.get_feature_names()\n",
    "\n",
    "# Vizualizamos las 50 palabras mas usadas\n",
    "print(\"50 palabras mas usadas: \",all_words[0:50])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dejamos comentado para hacerlo con el cuerpo si vemos que no tenemos buenos resultados con el título. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tomamso la lista de palabras y el vector que nos dice si es o no sarcastico el titulo\n",
    "#list_body = list(dataset_lemm['body_lemm'].values)\n",
    "#stars = dataset_lemm['stars'].values\n",
    "\n",
    "## Para probar con Stemmizer:\n",
    "#list_titulos = list(dataset_stem'titular_stem'].values)\n",
    "#is_sarc = dataset_stem['is_sarcastic'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "#from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "# Usaremos solo las 1000 palabras con mas frecuencia en todo el corpus para generar los vectores\n",
    "max_features=1000\n",
    "\n",
    "# Es decir que cada instancia tendrá 1000 features\n",
    "#cou_vec=CountVectorizer(max_features=max_features) # stop_words=\"spanish\" , ngram_range=(1, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "#matriz_body = cou_vec.fit_transform(list_body)\n",
    "\n",
    "# Tomamos las palabras\n",
    "#all_words = cou_vec.get_feature_names()\n",
    "\n",
    "# Vizualizamos las 50 palabras mas usadas\n",
    "#print(\"50 palabras mas usadas: \",all_words[0:50])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "#me agarra solo una palabra.."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Parte B - Modelo de Machine Learning\n",
    "\n",
    "Debemos evaluar correctamente el modelo que realicemos. Esto implica un correcto manejo de datos de Train y Test, elegir una métrica apropiada y justificar su elección, y comparar los resultados contra un modelo benchmark."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Modelar\n",
    "\n",
    "Tengamos en cuenta que, dependiendo el número de palabras (features) que hayamos elegido, los modelos pueden tardar un rato en entrenarse. Es por eso que avanzamos con los titulares. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vamos a convertir el puntaje en un problema binario, pasando de 5 puntajes a positivo y negativo. De esta forma el problema es de clasificación."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset_lemm.loc[ dataset_lemm.stars == 1, 'label'] = \"negativo\"\n",
    "dataset_lemm.loc[ dataset_lemm.stars == 2, 'label'] = \"negativo\"\n",
    "dataset_lemm.loc[ dataset_lemm.stars == 3, 'label'] = \"negativo\"\n",
    "dataset_lemm.loc[ dataset_lemm.stars == 4, 'label'] = \"positivo\"\n",
    "dataset_lemm.loc[ dataset_lemm.stars == 5, 'label'] = \"positivo\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Como siempre, separamos en test y train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = matriz_titulos.toarray()\n",
    "y = dataset_lemm ['label'] \n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.2,random_state=42,stratify=y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tambien definimos una función que nos permite plotear los resultados en una matriz de confusión."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sns\n",
    "\n",
    "def confusion(ytest,y_pred):\n",
    "    names=[\"negativo\",\"positivo\"]\n",
    "    cm=confusion_matrix(ytest,y_pred)\n",
    "    f,ax=plt.subplots(figsize=(5,5))\n",
    "    sns.heatmap(cm,annot=True,linewidth=.5,linecolor=\"r\",fmt=\".0f\",ax=ax)\n",
    "    plt.xlabel(\"y_pred\")\n",
    "    plt.ylabel(\"y_true\")\n",
    "    ax.set_xticklabels(names)\n",
    "    ax.set_yticklabels(names)\n",
    "    plt.show()\n",
    "\n",
    "    return"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Naive Bayes\n",
    "Empezamos por un simple Naive Bayes para tener un benchmark de referencia para el accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "acc :  0.635975\n"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "nb = GaussianNB()\n",
    "nb.fit(xtrain,ytrain)\n",
    "print(\"acc : \", nb.score(xtest,ytest))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred=nb.predict(xtest)\n",
    "confusion(ytest,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest\n",
    "Veamos cómo funciona un random forest para predecir el puntaje de un comentario en base a su titular."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "acc:  0.765225\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "rf = RandomForestClassifier(n_estimators = 50, random_state=42)\n",
    "rf.fit(xtrain,ytrain)\n",
    "print(\"acc: \",rf.score(xtest,ytest))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Observamos que el accuracy da mejor que en el benchmark"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "b. Grafiquen su matriz de confusión:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred=rf.predict(xtest)\n",
    "confusion(ytest,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La matriz de confusión mejora su performance con random forests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora vemos cuales son las palabras que mayormente determinan el puntaje de un comentario para este clasificador.\n",
    "Los mejores predictores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admin\\miniconda3\\envs\\datascience\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Le preguntamos la importancia de cada feature (cada palabra)\n",
    "importances = rf.feature_importances_\n",
    "# Tomamos la lista de palabras\n",
    "all_words = cou_vec.get_feature_names()\n",
    "columns = all_words\n",
    "\n",
    "# Ordenamos por importnacia y tomamos las 20 primeras\n",
    "indices = np.argsort(importances)[::-1]\n",
    "indices = indices[:20]\n",
    "selected_columns = [columns[i] for i in indices]\n",
    "selected_importances = importances[indices]\n",
    "\n",
    "# Por ultimo graficamos\n",
    "plt.figure(figsize = (15,8))\n",
    "sns.barplot(selected_columns, selected_importances)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La información que usa el modelo para predecir tiene sentido  con algunas pocas excepciones como la palabrea compra. También vemos que el modelo tomo buena, buen y bien como palabras distinas cuando deberían estar llevadas a raíz, lo mismo con mala y malo."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SVM\n",
    "Por último vamos a utilizar uno de los modelos mas prometedores para este tipo de datos donde el numero de features es comparable al número de instancias: SVM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.77105"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Notar que en vez de utilizar SVC, vamos a usar LinearSVC. \n",
    "# Para el Kernel Lineal, esta función es MUCHO mas rapida que la tradicional SVC.\n",
    "from sklearn.svm import LinearSVC\n",
    "\n",
    "svc = LinearSVC(C = 1)\n",
    "svc.fit(xtrain,ytrain)\n",
    "svc.score(xtest,ytest)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Mejora el accuracy aunque no es tanto mejor que el de random forests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Grafiquen su matrz de confusión:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred=svc.predict(xtest)\n",
    "confusion(ytest,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Observamos con la matriz de confusión que el SVM es el que tiene mejor performance y predice mejor si un comentario es positivo o negativo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## . Parte C: Investigación\n",
    "\n",
    "Algunas posibilidades para explorar son las siguientes:\n",
    "\n",
    "1. Cambiar el numero de features que tomamos.\n",
    "1. Probar con TF-IDF.\n",
    "1. Incluir los 2-gramas. \n",
    "1. Conservar los signos de exclamación y pregunta del texto.\n",
    "1. Entrenar los modelos con el cuerpo del texto para ver si mejora el performance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Para pensar**: ¿es un problema de Clasificación o de Regresión?\n",
    "En el sentido que lo plantemos, como problema binario donde los comentarios son positivos o negativos es un problema de clasificación. El modelo nos va a ayudar a predecir la clasificación de los comentarios. \n",
    "Convertimos el problema de Machine Learning en un problema binario. Es decir, asignamos únicamente las etiquetas Positiva y Negativa a cada crítica e hicimos un modelo que, en lugar de predecir las estrellas, prediga esa etiqueta. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Con respecto a los modelos que entrenamos, al comparar los resultados elegiría SVM porque fue el que mejor perfomance tuvo."
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "DS_Proyecto_03_NLP.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
